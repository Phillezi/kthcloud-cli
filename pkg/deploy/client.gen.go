// Package deploy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package deploy

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes    = "ApiKeyAuth.Scopes"
	KeycloakOAuthScopes = "KeycloakOAuth.Scopes"
)

// Defines values for BodyDeploymentCommandCommand.
const (
	Restart BodyDeploymentCommandCommand = "restart"
)

// Defines values for BodyDeploymentCreateVisibility.
const (
	BodyDeploymentCreateVisibilityAuth    BodyDeploymentCreateVisibility = "auth"
	BodyDeploymentCreateVisibilityPrivate BodyDeploymentCreateVisibility = "private"
	BodyDeploymentCreateVisibilityPublic  BodyDeploymentCreateVisibility = "public"
)

// Defines values for BodyDeploymentUpdateVisibility.
const (
	BodyDeploymentUpdateVisibilityAuth    BodyDeploymentUpdateVisibility = "auth"
	BodyDeploymentUpdateVisibilityPrivate BodyDeploymentUpdateVisibility = "private"
	BodyDeploymentUpdateVisibilityPublic  BodyDeploymentUpdateVisibility = "public"
)

// Defines values for BodyJobUpdateStatus.
const (
	Completed  BodyJobUpdateStatus = "completed"
	Failed     BodyJobUpdateStatus = "failed"
	Finished   BodyJobUpdateStatus = "finished"
	Pending    BodyJobUpdateStatus = "pending"
	Running    BodyJobUpdateStatus = "running"
	Terminated BodyJobUpdateStatus = "terminated"
)

// Defines values for BodyPortCreateProtocol.
const (
	BodyPortCreateProtocolTcp BodyPortCreateProtocol = "tcp"
	BodyPortCreateProtocolUdp BodyPortCreateProtocol = "udp"
)

// Defines values for BodyPortUpdateProtocol.
const (
	BodyPortUpdateProtocolTcp BodyPortUpdateProtocol = "tcp"
	BodyPortUpdateProtocolUdp BodyPortUpdateProtocol = "udp"
)

// Defines values for BodyResourceMigrationCreateType.
const (
	UpdateOwner BodyResourceMigrationCreateType = "updateOwner"
)

// BodyApiKey defines model for body.ApiKey.
type BodyApiKey struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// BodyApiKeyCreate defines model for body.ApiKeyCreate.
type BodyApiKeyCreate struct {
	ExpiresAt string `json:"expiresAt"`
	Name      string `json:"name"`
}

// BodyApiKeyCreated defines model for body.ApiKeyCreated.
type BodyApiKeyCreated struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Key       *string `json:"key,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// BodyBindingError defines model for body.BindingError.
type BodyBindingError struct {
	ValidationErrors *map[string][]string `json:"validationErrors,omitempty"`
}

// BodyCiConfig defines model for body.CiConfig.
type BodyCiConfig struct {
	Config *string `json:"config,omitempty"`
}

// BodyClusterCapacities defines model for body.ClusterCapacities.
type BodyClusterCapacities struct {
	Cluster *string `json:"cluster,omitempty"`

	// CpuCore Total
	CpuCore *BodyCpuCoreCapacities `json:"cpuCore,omitempty"`
	Gpu     *BodyGpuCapacities     `json:"gpu,omitempty"`
	Ram     *BodyRamCapacities     `json:"ram,omitempty"`
}

// BodyClusterStats defines model for body.ClusterStats.
type BodyClusterStats struct {
	Cluster  *string `json:"cluster,omitempty"`
	PodCount *int    `json:"podCount,omitempty"`
}

// BodyCpuCoreCapacities Total
type BodyCpuCoreCapacities struct {
	Total *int `json:"total,omitempty"`
}

// BodyCpuStatus defines model for body.CpuStatus.
type BodyCpuStatus struct {
	Load *BodyCpuStatusLoad `json:"load,omitempty"`
	Temp *BodyCpuStatusTemp `json:"temp,omitempty"`
}

// BodyCpuStatusLoad defines model for body.CpuStatusLoad.
type BodyCpuStatusLoad struct {
	Cores *[]int   `json:"cores,omitempty"`
	Main  *float32 `json:"main,omitempty"`
	Max   *float32 `json:"max,omitempty"`
}

// BodyCpuStatusTemp defines model for body.CpuStatusTemp.
type BodyCpuStatusTemp struct {
	Cores *[]int   `json:"cores,omitempty"`
	Main  *float32 `json:"main,omitempty"`
	Max   *float32 `json:"max,omitempty"`
}

// BodyCustomDomainRead defines model for body.CustomDomainRead.
type BodyCustomDomainRead struct {
	Domain *string `json:"domain,omitempty"`
	Secret *string `json:"secret,omitempty"`
	Status *string `json:"status,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// BodyDeploymentCommand defines model for body.DeploymentCommand.
type BodyDeploymentCommand struct {
	Command BodyDeploymentCommandCommand `json:"command"`
}

// BodyDeploymentCommandCommand defines model for BodyDeploymentCommand.Command.
type BodyDeploymentCommandCommand string

// BodyDeploymentCreate defines model for body.DeploymentCreate.
type BodyDeploymentCreate struct {
	Args     *[]string `json:"args,omitempty"`
	CpuCores *float32  `json:"cpuCores,omitempty"`

	// CustomDomain CustomDomain is the domain that the deployment will be available on.
	// The max length is set to 243 to allow for a subdomain when confirming the domain.
	CustomDomain    *string    `json:"customDomain,omitempty"`
	Envs            *[]BodyEnv `json:"envs,omitempty"`
	HealthCheckPath *string    `json:"healthCheckPath,omitempty"`
	Image           *string    `json:"image,omitempty"`
	InitCommands    *[]string  `json:"initCommands,omitempty"`
	Name            string     `json:"name"`

	// NeverStale Boolean to make deployment never get disabled, despite being stale
	NeverStale *bool `json:"neverStale,omitempty"`

	// Private Deprecated: Use Visibility instead.
	Private    *bool                           `json:"private,omitempty"`
	Ram        *float32                        `json:"ram,omitempty"`
	Replicas   *int                            `json:"replicas,omitempty"`
	Visibility *BodyDeploymentCreateVisibility `json:"visibility,omitempty"`
	Volumes    *[]BodyVolume                   `json:"volumes,omitempty"`

	// Zone Zone is the zone that the deployment will be created in.
	// If the zone is not set, the deployment will be created in the default zone.
	Zone *string `json:"zone,omitempty"`
}

// BodyDeploymentCreateVisibility defines model for BodyDeploymentCreate.Visibility.
type BodyDeploymentCreateVisibility string

// BodyDeploymentCreated defines model for body.DeploymentCreated.
type BodyDeploymentCreated struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyDeploymentRead defines model for body.DeploymentRead.
type BodyDeploymentRead struct {
	AccessedAt      *string               `json:"accessedAt,omitempty"`
	Args            *[]string             `json:"args,omitempty"`
	CreatedAt       *string               `json:"createdAt,omitempty"`
	CustomDomain    *BodyCustomDomainRead `json:"customDomain,omitempty"`
	Envs            *[]BodyEnv            `json:"envs,omitempty"`
	Error           *string               `json:"error,omitempty"`
	HealthCheckPath *string               `json:"healthCheckPath,omitempty"`
	Id              *string               `json:"id,omitempty"`
	Image           *string               `json:"image,omitempty"`
	InitCommands    *[]string             `json:"initCommands,omitempty"`

	// Integrations Integrations are currently not used, but could be used if we wanted to add a list of integrations to the deployment
	//
	// For example GitHub
	Integrations  *[]string `json:"integrations,omitempty"`
	InternalPort  *int      `json:"internalPort,omitempty"`
	InternalPorts *[]int    `json:"internalPorts,omitempty"`
	Name          *string   `json:"name,omitempty"`
	NeverStale    *bool     `json:"neverStale,omitempty"`
	OwnerId       *string   `json:"ownerId,omitempty"`
	PingResult    *int      `json:"pingResult,omitempty"`

	// Private Deprecated: Use Visibility instead.
	Private       *bool                `json:"private,omitempty"`
	RepairedAt    *string              `json:"repairedAt,omitempty"`
	ReplicaStatus *BodyReplicaStatus   `json:"replicaStatus,omitempty"`
	RestartedAt   *string              `json:"restartedAt,omitempty"`
	Specs         *BodyDeploymentSpecs `json:"specs,omitempty"`
	Status        *string              `json:"status,omitempty"`
	StorageUrl    *string              `json:"storageUrl,omitempty"`
	Teams         *[]string            `json:"teams,omitempty"`
	Type          *string              `json:"type,omitempty"`
	UpdatedAt     *string              `json:"updatedAt,omitempty"`
	Url           *string              `json:"url,omitempty"`
	Visibility    *string              `json:"visibility,omitempty"`
	Volumes       *[]BodyVolume        `json:"volumes,omitempty"`
	Zone          *string              `json:"zone,omitempty"`
}

// BodyDeploymentSpecs defines model for body.DeploymentSpecs.
type BodyDeploymentSpecs struct {
	CpuCores *float32 `json:"cpuCores,omitempty"`
	Ram      *float32 `json:"ram,omitempty"`
	Replicas *int     `json:"replicas,omitempty"`
}

// BodyDeploymentUpdate defines model for body.DeploymentUpdate.
type BodyDeploymentUpdate struct {
	Args     *[]string `json:"args,omitempty"`
	CpuCores *float32  `json:"cpuCores,omitempty"`

	// CustomDomain CustomDomain is the domain that the deployment will be available on.
	// The max length is set to 243 to allow for a subdomain when confirming the domain.
	CustomDomain    *string    `json:"customDomain,omitempty"`
	Envs            *[]BodyEnv `json:"envs,omitempty"`
	HealthCheckPath *string    `json:"healthCheckPath,omitempty"`
	Image           *string    `json:"image,omitempty"`
	InitCommands    *[]string  `json:"initCommands,omitempty"`
	Name            string     `json:"name"`
	NeverStale      *bool      `json:"neverStale,omitempty"`

	// Private Deprecated: Use Visibility instead.
	Private    *bool                           `json:"private,omitempty"`
	Ram        *float32                        `json:"ram,omitempty"`
	Replicas   *int                            `json:"replicas,omitempty"`
	Visibility *BodyDeploymentUpdateVisibility `json:"visibility,omitempty"`
	Volumes    *[]BodyVolume                   `json:"volumes,omitempty"`
}

// BodyDeploymentUpdateVisibility defines model for BodyDeploymentUpdate.Visibility.
type BodyDeploymentUpdateVisibility string

// BodyDeploymentUpdated defines model for body.DeploymentUpdated.
type BodyDeploymentUpdated struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyDiscoverRead defines model for body.DiscoverRead.
type BodyDiscoverRead struct {
	Roles   *[]BodyRole `json:"roles,omitempty"`
	Version *string     `json:"version,omitempty"`
}

// BodyEnv defines model for body.Env.
type BodyEnv struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// BodyGpuCapacities defines model for body.GpuCapacities.
type BodyGpuCapacities struct {
	Total *int `json:"total,omitempty"`
}

// BodyGpuGroupRead defines model for body.GpuGroupRead.
type BodyGpuGroupRead struct {
	Available   *int    `json:"available,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Total       *int    `json:"total,omitempty"`
	Vendor      *string `json:"vendor,omitempty"`
	Zone        *string `json:"zone,omitempty"`
}

// BodyGpuLeaseCreate defines model for body.GpuLeaseCreate.
type BodyGpuLeaseCreate struct {
	// GpuGroupId GpuGroupID is used to specify the GPU to lease.
	// As such, the lease does not specify which specific GPU to lease, but rather the type of GPU to lease.
	GpuGroupId string `json:"gpuGroupId"`

	// LeaseForever LeaseForever is used to specify whether the lease should be created forever.
	LeaseForever *bool `json:"leaseForever,omitempty"`
}

// BodyGpuLeaseCreated defines model for body.GpuLeaseCreated.
type BodyGpuLeaseCreated struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyGpuLeaseDeleted defines model for body.GpuLeaseDeleted.
type BodyGpuLeaseDeleted struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyGpuLeaseRead defines model for body.GpuLeaseRead.
type BodyGpuLeaseRead struct {
	// ActivatedAt ActivatedAt specifies the time when the lease was activated. This is the time the user first attached the GPU
	// or 1 day after the lease was created if the user did not attach the GPU.
	ActivatedAt *string `json:"activatedAt,omitempty"`
	Active      *bool   `json:"active,omitempty"`

	// AssignedAt AssignedAt specifies the time when the lease was assigned to the user.
	AssignedAt *string `json:"assignedAt,omitempty"`
	CreatedAt  *string `json:"createdAt,omitempty"`
	ExpiredAt  *string `json:"expiredAt,omitempty"`

	// ExpiresAt ExpiresAt specifies the time when the lease will expire.
	// This is only present if the lease is active.
	ExpiresAt     *string  `json:"expiresAt,omitempty"`
	GpuGroupId    *string  `json:"gpuGroupId,omitempty"`
	Id            *string  `json:"id,omitempty"`
	LeaseDuration *float32 `json:"leaseDuration,omitempty"`
	QueuePosition *int     `json:"queuePosition,omitempty"`
	UserId        *string  `json:"userId,omitempty"`

	// VmId VmID is set when the lease is attached to a VM.
	VmId *string `json:"vmId,omitempty"`
}

// BodyGpuLeaseUpdate defines model for body.GpuLeaseUpdate.
type BodyGpuLeaseUpdate struct {
	// VmId VmID is used to specify the VM to attach the lease to.
	//
	// - If specified, the lease will be attached to the VM.
	//
	// - If the lease is already attached to a VM, it will be detached from the current VM and attached to the new VM.
	//
	// - If the lease is not active, specifying a VM will activate the lease.
	//
	// - If the lease is not assigned, an error will be returned.
	VmId *string `json:"vmId,omitempty"`
}

// BodyGpuLeaseUpdated defines model for body.GpuLeaseUpdated.
type BodyGpuLeaseUpdated struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyGpuStatus defines model for body.GpuStatus.
type BodyGpuStatus struct {
	Temp *[]BodyGpuStatusTemp `json:"temp,omitempty"`
}

// BodyGpuStatusTemp defines model for body.GpuStatusTemp.
type BodyGpuStatusTemp struct {
	Main *float32 `json:"main,omitempty"`
}

// BodyHarborWebhook defines model for body.HarborWebhook.
type BodyHarborWebhook struct {
	EventData *struct {
		Repository *struct {
			DateCreated  *int    `json:"date_created,omitempty"`
			Name         *string `json:"name,omitempty"`
			Namespace    *string `json:"namespace,omitempty"`
			RepoFullName *string `json:"repo_full_name,omitempty"`
			RepoType     *string `json:"repo_type,omitempty"`
		} `json:"repository,omitempty"`
		Resources *[]struct {
			Digest      *string `json:"digest,omitempty"`
			ResourceUrl *string `json:"resource_url,omitempty"`
			Tag         *string `json:"tag,omitempty"`
		} `json:"resources,omitempty"`
	} `json:"event_data,omitempty"`
	OccurAt  *int    `json:"occur_at,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// BodyHostCapacities defines model for body.HostCapacities.
type BodyHostCapacities struct {
	// CpuCore Total
	CpuCore     *BodyCpuCoreCapacities `json:"cpuCore,omitempty"`
	DisplayName *string                `json:"displayName,omitempty"`
	Gpu         *BodyGpuCapacities     `json:"gpu,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Ram         *BodyRamCapacities     `json:"ram,omitempty"`

	// Zone Zone is the name of the zone where the host is located.
	Zone *string `json:"zone,omitempty"`
}

// BodyHostRead defines model for body.HostRead.
type BodyHostRead struct {
	DisplayName *string `json:"displayName,omitempty"`
	Name        *string `json:"name,omitempty"`

	// Zone Zone is the name of the zone where the host is located.
	Zone *string `json:"zone,omitempty"`
}

// BodyHostStatus defines model for body.HostStatus.
type BodyHostStatus struct {
	Cpu         *BodyCpuStatus `json:"cpu,omitempty"`
	DisplayName *string        `json:"displayName,omitempty"`
	Gpu         *BodyGpuStatus `json:"gpu,omitempty"`
	Name        *string        `json:"name,omitempty"`
	Ram         *BodyRamStatus `json:"ram,omitempty"`

	// Zone Zone is the name of the zone where the host is located.
	Zone *string `json:"zone,omitempty"`
}

// BodyHostVerboseRead defines model for body.HostVerboseRead.
type BodyHostVerboseRead struct {
	DeactivatedUntil *string `json:"deactivatedUntil,omitempty"`
	DisplayName      *string `json:"displayName,omitempty"`
	Enabled          *bool   `json:"enabled,omitempty"`
	Ip               *string `json:"ip,omitempty"`
	LastSeenAt       *string `json:"lastSeenAt,omitempty"`
	Name             *string `json:"name,omitempty"`
	Port             *int    `json:"port,omitempty"`
	RegisteredAt     *string `json:"registeredAt,omitempty"`
	Schedulable      *bool   `json:"schedulable,omitempty"`

	// Zone Zone is the name of the zone where the host is located.
	Zone *string `json:"zone,omitempty"`
}

// BodyHttpProxyCreate defines model for body.HttpProxyCreate.
type BodyHttpProxyCreate struct {
	// CustomDomain CustomDomain is the domain that the deployment will be available on.
	// The max length is set to 243 to allow for a subdomain when confirming the domain.
	CustomDomain *string `json:"customDomain,omitempty"`
	Name         string  `json:"name"`
}

// BodyHttpProxyRead defines model for body.HttpProxyRead.
type BodyHttpProxyRead struct {
	CustomDomain *BodyCustomDomainRead `json:"customDomain,omitempty"`
	Name         *string               `json:"name,omitempty"`
	Url          *string               `json:"url,omitempty"`
}

// BodyHttpProxyUpdate defines model for body.HttpProxyUpdate.
type BodyHttpProxyUpdate struct {
	// CustomDomain CustomDomain is the domain that the deployment will be available on.
	// The max length is set to 243 to allow for a subdomain when confirming the domain.
	CustomDomain *string `json:"customDomain,omitempty"`
	Name         string  `json:"name"`
}

// BodyJobRead defines model for body.JobRead.
type BodyJobRead struct {
	CreatedAt  *string `json:"createdAt,omitempty"`
	FinishedAt *string `json:"finishedAt,omitempty"`
	Id         *string `json:"id,omitempty"`
	LastError  *string `json:"lastError,omitempty"`
	LastRunAt  *string `json:"lastRunAt,omitempty"`
	RunAfter   *string `json:"runAfter,omitempty"`
	Status     *string `json:"status,omitempty"`
	Type       *string `json:"type,omitempty"`
	UserId     *string `json:"userId,omitempty"`
}

// BodyJobUpdate defines model for body.JobUpdate.
type BodyJobUpdate struct {
	Status *BodyJobUpdateStatus `json:"status,omitempty"`
}

// BodyJobUpdateStatus defines model for BodyJobUpdate.Status.
type BodyJobUpdateStatus string

// BodyK8sStats defines model for body.K8sStats.
type BodyK8sStats struct {
	Clusters *[]BodyClusterStats `json:"clusters,omitempty"`
	PodCount *int                `json:"podCount,omitempty"`
}

// BodyNotificationRead defines model for body.NotificationRead.
type BodyNotificationRead struct {
	CompletedAt *string                 `json:"completedAt,omitempty"`
	Content     *map[string]interface{} `json:"content,omitempty"`
	CreatedAt   *string                 `json:"createdAt,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	ReadAt      *string                 `json:"readAt,omitempty"`
	ToastedAt   *string                 `json:"toastedAt,omitempty"`
	Type        *string                 `json:"type,omitempty"`
	UserId      *string                 `json:"userId,omitempty"`
}

// BodyNotificationUpdate defines model for body.NotificationUpdate.
type BodyNotificationUpdate struct {
	Read    *bool `json:"read,omitempty"`
	Toasted *bool `json:"toasted,omitempty"`
}

// BodyPortCreate defines model for body.PortCreate.
type BodyPortCreate struct {
	HttpProxy *BodyHttpProxyCreate   `json:"httpProxy,omitempty"`
	Name      string                 `json:"name"`
	Port      int                    `json:"port"`
	Protocol  BodyPortCreateProtocol `json:"protocol"`
}

// BodyPortCreateProtocol defines model for BodyPortCreate.Protocol.
type BodyPortCreateProtocol string

// BodyPortRead defines model for body.PortRead.
type BodyPortRead struct {
	ExternalPort *int               `json:"externalPort,omitempty"`
	HttpProxy    *BodyHttpProxyRead `json:"httpProxy,omitempty"`
	Name         *string            `json:"name,omitempty"`
	Port         *int               `json:"port,omitempty"`
	Protocol     *string            `json:"protocol,omitempty"`
}

// BodyPortUpdate defines model for body.PortUpdate.
type BodyPortUpdate struct {
	HttpProxy *BodyHttpProxyUpdate   `json:"httpProxy,omitempty"`
	Name      string                 `json:"name"`
	Port      int                    `json:"port"`
	Protocol  BodyPortUpdateProtocol `json:"protocol"`
}

// BodyPortUpdateProtocol defines model for BodyPortUpdate.Protocol.
type BodyPortUpdateProtocol string

// BodyPublicKey defines model for body.PublicKey.
type BodyPublicKey struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

// BodyQuota defines model for body.Quota.
type BodyQuota struct {
	CpuCores *float32 `json:"cpuCores,omitempty"`
	DiskSize *float32 `json:"diskSize,omitempty"`

	// GpuLeaseDuration in hours
	GpuLeaseDuration *float32 `json:"gpuLeaseDuration,omitempty"`
	Ram              *float32 `json:"ram,omitempty"`
	Snapshots        *int     `json:"snapshots,omitempty"`
}

// BodyRamCapacities defines model for body.RamCapacities.
type BodyRamCapacities struct {
	Total *int `json:"total,omitempty"`
}

// BodyRamStatus defines model for body.RamStatus.
type BodyRamStatus struct {
	Load *BodyRamStatusLoad `json:"load,omitempty"`
}

// BodyRamStatusLoad defines model for body.RamStatusLoad.
type BodyRamStatusLoad struct {
	Main *float32 `json:"main,omitempty"`
}

// BodyReplicaStatus defines model for body.ReplicaStatus.
type BodyReplicaStatus struct {
	// AvailableReplicas AvailableReplicas is the number of replicas that are available.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`

	// DesiredReplicas DesiredReplicas is the number of replicas that the deployment should have.
	DesiredReplicas *int `json:"desiredReplicas,omitempty"`

	// ReadyReplicas ReadyReplicas is the number of replicas that are ready.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`

	// UnavailableReplicas UnavailableReplicas is the number of replicas that are unavailable.
	UnavailableReplicas *int `json:"unavailableReplicas,omitempty"`
}

// BodyResourceMigrationCreate defines model for body.ResourceMigrationCreate.
type BodyResourceMigrationCreate struct {
	// ResourceId ResourceID is the ID of the resource that is being migrated.
	// This can be a VM ID, deployment ID, etc. depending on the type of the migration.
	ResourceId string `json:"resourceId"`

	// Status Status is the status of the resource migration.
	// It is used by privileged admins to directly accept or reject a migration.
	// The field is ignored by non-admins.
	//
	// Possible values:
	// - accepted
	// - pending
	Status *string `json:"status,omitempty"`

	// Type Type is the type of the resource migration.
	//
	// Possible values:
	// - updateOwner
	Type BodyResourceMigrationCreateType `json:"type"`

	// UpdateOwner UpdateOwner is the set of parameters that are required for the updateOwner migration type.
	// It is ignored if the migration type is not updateOwner.
	UpdateOwner *struct {
		OwnerId string `json:"ownerId"`
	} `json:"updateOwner,omitempty"`
}

// BodyResourceMigrationCreateType Type is the type of the resource migration.
//
// Possible values:
// - updateOwner
type BodyResourceMigrationCreateType string

// BodyResourceMigrationCreated defines model for body.ResourceMigrationCreated.
type BodyResourceMigrationCreated struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Id        *string `json:"id,omitempty"`

	// JobId JobID is the ID of the job that was created for the resource migration.
	// It will only be set if the migration was created with status 'accepted'.
	JobId *string `json:"jobId,omitempty"`

	// ResourceId ResourceID is the ID of the resource that is being migrated.
	// This can be a VM ID, deployment ID, etc. depending on the type of the migration.
	ResourceId *string `json:"resourceId,omitempty"`

	// ResourceType ResourceType is the type of the resource that is being migrated.
	//
	// Possible values:
	// - vm
	// - deployment
	ResourceType *string `json:"resourceType,omitempty"`

	// Status Status is the status of the resource migration.
	// When this field is set to 'accepted', the migration will take place and then automatically be deleted.
	Status *string `json:"status,omitempty"`

	// Type Type is the type of the resource migration.
	//
	// Possible values:
	// - updateOwner
	Type *string `json:"type,omitempty"`

	// UpdateOwner UpdateOwner is the set of parameters that are required for the updateOwner migration type.
	// It is empty if the migration type is not updateOwner.
	UpdateOwner *struct {
		OwnerId *string `json:"ownerId,omitempty"`
	} `json:"updateOwner,omitempty"`

	// UserId UserID is the ID of the user who initiated the migration.
	UserId *string `json:"userId,omitempty"`
}

// BodyResourceMigrationRead defines model for body.ResourceMigrationRead.
type BodyResourceMigrationRead struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Id        *string `json:"id,omitempty"`

	// ResourceId ResourceID is the ID of the resource that is being migrated.
	// This can be a VM ID, deployment ID, etc. depending on the type of the migration.
	ResourceId *string `json:"resourceId,omitempty"`

	// ResourceType ResourceType is the type of the resource that is being migrated.
	//
	// Possible values:
	// - vm
	// - deployment
	ResourceType *string `json:"resourceType,omitempty"`

	// Status Status is the status of the resource migration.
	// When this field is set to 'accepted', the migration will take place and then automatically be deleted.
	Status *string `json:"status,omitempty"`

	// Type Type is the type of the resource migration.
	//
	// Possible values:
	// - updateOwner
	Type *string `json:"type,omitempty"`

	// UpdateOwner UpdateOwner is the set of parameters that are required for the updateOwner migration type.
	// It is empty if the migration type is not updateOwner.
	UpdateOwner *struct {
		OwnerId *string `json:"ownerId,omitempty"`
	} `json:"updateOwner,omitempty"`

	// UserId UserID is the ID of the user who initiated the migration.
	UserId *string `json:"userId,omitempty"`
}

// BodyResourceMigrationUpdate defines model for body.ResourceMigrationUpdate.
type BodyResourceMigrationUpdate struct {
	// Code Code is a token required when accepting a migration if the acceptor is not an admin.
	// It is sent to the acceptor using the notification API
	Code *string `json:"code,omitempty"`

	// Status Status is the status of the resource migration.
	// It is used to accept a migration by setting the status to 'accepted'.
	// If the acceptor is not an admin, a Code must be provided.
	//
	// Possible values:
	// - accepted
	// - pending
	Status string `json:"status"`
}

// BodyResourceMigrationUpdated defines model for body.ResourceMigrationUpdated.
type BodyResourceMigrationUpdated struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Id        *string `json:"id,omitempty"`

	// JobId JobID is the ID of the job that was created for the resource migration.
	// It will only be set if the migration was updated with status 'accepted'.
	JobId *string `json:"jobId,omitempty"`

	// ResourceId ResourceID is the ID of the resource that is being migrated.
	// This can be a VM ID, deployment ID, etc. depending on the type of the migration.
	ResourceId *string `json:"resourceId,omitempty"`

	// ResourceType ResourceType is the type of the resource that is being migrated.
	//
	// Possible values:
	// - vm
	// - deployment
	ResourceType *string `json:"resourceType,omitempty"`

	// Status Status is the status of the resource migration.
	// When this field is set to 'accepted', the migration will take place and then automatically be deleted.
	Status *string `json:"status,omitempty"`

	// Type Type is the type of the resource migration.
	//
	// Possible values:
	// - updateOwner
	Type *string `json:"type,omitempty"`

	// UpdateOwner UpdateOwner is the set of parameters that are required for the updateOwner migration type.
	// It is empty if the migration type is not updateOwner.
	UpdateOwner *struct {
		OwnerId *string `json:"ownerId,omitempty"`
	} `json:"updateOwner,omitempty"`

	// UserId UserID is the ID of the user who initiated the migration.
	UserId *string `json:"userId,omitempty"`
}

// BodyRole defines model for body.Role.
type BodyRole struct {
	Description *string    `json:"description,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Permissions *[]string  `json:"permissions,omitempty"`
	Quota       *BodyQuota `json:"quota,omitempty"`
}

// BodySmDeleted defines model for body.SmDeleted.
type BodySmDeleted struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodySmRead defines model for body.SmRead.
type BodySmRead struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	Id        *string `json:"id,omitempty"`
	OwnerId   *string `json:"ownerId,omitempty"`
	Url       *string `json:"url,omitempty"`
	Zone      *string `json:"zone,omitempty"`
}

// BodySystemCapacities defines model for body.SystemCapacities.
type BodySystemCapacities struct {
	// Clusters Per Cluster
	Clusters *[]BodyClusterCapacities `json:"clusters,omitempty"`

	// CpuCore Total
	CpuCore *BodyCpuCoreCapacities `json:"cpuCore,omitempty"`
	Gpu     *BodyGpuCapacities     `json:"gpu,omitempty"`

	// Hosts Per Host
	Hosts *[]BodyHostCapacities `json:"hosts,omitempty"`
	Ram   *BodyRamCapacities    `json:"ram,omitempty"`
}

// BodySystemStats defines model for body.SystemStats.
type BodySystemStats struct {
	K8s *BodyK8sStats `json:"k8s,omitempty"`
}

// BodySystemStatus defines model for body.SystemStatus.
type BodySystemStatus struct {
	Hosts *[]BodyHostStatus `json:"hosts,omitempty"`
}

// BodyTeamCreate defines model for body.TeamCreate.
type BodyTeamCreate struct {
	Description *string                 `json:"description,omitempty"`
	Members     *[]BodyTeamMemberCreate `json:"members,omitempty"`
	Name        string                  `json:"name"`
	Resources   *[]string               `json:"resources,omitempty"`
}

// BodyTeamMember defines model for body.TeamMember.
type BodyTeamMember struct {
	AddedAt      *string `json:"addedAt,omitempty"`
	Email        *string `json:"email,omitempty"`
	FirstName    *string `json:"firstName,omitempty"`
	GravatarUrl  *string `json:"gravatarUrl,omitempty"`
	Id           *string `json:"id,omitempty"`
	JoinedAt     *string `json:"joinedAt,omitempty"`
	LastName     *string `json:"lastName,omitempty"`
	MemberStatus *string `json:"memberStatus,omitempty"`
	TeamRole     *string `json:"teamRole,omitempty"`
	Username     *string `json:"username,omitempty"`
}

// BodyTeamMemberCreate defines model for body.TeamMemberCreate.
type BodyTeamMemberCreate struct {
	Id string `json:"id"`

	// TeamRole default to MemberRoleAdmin right now
	TeamRole *string `json:"teamRole,omitempty"`
}

// BodyTeamMemberUpdate defines model for body.TeamMemberUpdate.
type BodyTeamMemberUpdate struct {
	Id string `json:"id"`

	// TeamRole default to MemberRoleAdmin right now
	TeamRole *string `json:"teamRole,omitempty"`
}

// BodyTeamRead defines model for body.TeamRead.
type BodyTeamRead struct {
	CreatedAt   *string             `json:"createdAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *string             `json:"id,omitempty"`
	Members     *[]BodyTeamMember   `json:"members,omitempty"`
	Name        *string             `json:"name,omitempty"`
	OwnerId     *string             `json:"ownerId,omitempty"`
	Resources   *[]BodyTeamResource `json:"resources,omitempty"`
	UpdatedAt   *string             `json:"updatedAt,omitempty"`
}

// BodyTeamResource defines model for body.TeamResource.
type BodyTeamResource struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// BodyTeamUpdate defines model for body.TeamUpdate.
type BodyTeamUpdate struct {
	Description *string                 `json:"description,omitempty"`
	Members     *[]BodyTeamMemberUpdate `json:"members,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Resources   *[]string               `json:"resources,omitempty"`
}

// BodyTimestampedSystemCapacities defines model for body.TimestampedSystemCapacities.
type BodyTimestampedSystemCapacities struct {
	Capacities *BodySystemCapacities `json:"capacities,omitempty"`
	Timestamp  *string               `json:"timestamp,omitempty"`
}

// BodyTimestampedSystemStats defines model for body.TimestampedSystemStats.
type BodyTimestampedSystemStats struct {
	Stats     *BodySystemStats `json:"stats,omitempty"`
	Timestamp *string          `json:"timestamp,omitempty"`
}

// BodyTimestampedSystemStatus defines model for body.TimestampedSystemStatus.
type BodyTimestampedSystemStatus struct {
	Status    *BodySystemStatus `json:"status,omitempty"`
	Timestamp *string           `json:"timestamp,omitempty"`
}

// BodyUsage defines model for body.Usage.
type BodyUsage struct {
	CpuCores *float32 `json:"cpuCores,omitempty"`
	DiskSize *int     `json:"diskSize,omitempty"`
	Ram      *float32 `json:"ram,omitempty"`
}

// BodyUserData defines model for body.UserData.
type BodyUserData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// BodyUserRead defines model for body.UserRead.
type BodyUserRead struct {
	Admin       *bool            `json:"admin,omitempty"`
	ApiKeys     *[]BodyApiKey    `json:"apiKeys,omitempty"`
	Email       *string          `json:"email,omitempty"`
	FirstName   *string          `json:"firstName,omitempty"`
	GravatarUrl *string          `json:"gravatarUrl,omitempty"`
	Id          *string          `json:"id,omitempty"`
	LastName    *string          `json:"lastName,omitempty"`
	PublicKeys  *[]BodyPublicKey `json:"publicKeys,omitempty"`
	Quota       *BodyQuota       `json:"quota,omitempty"`
	Role        *BodyRole        `json:"role,omitempty"`
	StorageUrl  *string          `json:"storageUrl,omitempty"`
	Usage       *BodyUsage       `json:"usage,omitempty"`
	UserData    *[]BodyUserData  `json:"userData,omitempty"`
	Username    *string          `json:"username,omitempty"`
}

// BodyUserUpdate defines model for body.UserUpdate.
type BodyUserUpdate struct {
	// ApiKeys ApiKeys specifies the API keys that should remain. If an API key is not in this list, it will be deleted.
	// However, API keys cannot be created, use /apiKeys endpoint to create new API keys.
	ApiKeys    *[]BodyApiKey    `json:"apiKeys,omitempty"`
	PublicKeys *[]BodyPublicKey `json:"publicKeys,omitempty"`
	UserData   *[]BodyUserData  `json:"userData,omitempty"`
}

// BodyVmCreate defines model for body.VmCreate.
type BodyVmCreate struct {
	CpuCores     int               `json:"cpuCores"`
	DiskSize     int               `json:"diskSize"`
	Name         string            `json:"name"`
	NeverStale   *bool             `json:"neverStale,omitempty"`
	Ports        *[]BodyPortCreate `json:"ports,omitempty"`
	Ram          int               `json:"ram"`
	SshPublicKey string            `json:"sshPublicKey"`
	Zone         *string           `json:"zone,omitempty"`
}

// BodyVmCreated defines model for body.VmCreated.
type BodyVmCreated struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyVmDeleted defines model for body.VmDeleted.
type BodyVmDeleted struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyVmGpuLease defines model for body.VmGpuLease.
type BodyVmGpuLease struct {
	// ActivatedAt ActivatedAt specifies the time when the lease was activated. This is the time the user first attached the GPU
	// or 1 day after the lease was created if the user did not attach the GPU.
	ActivatedAt *string `json:"activatedAt,omitempty"`

	// AssignedAt AssignedAt specifies the time when the lease was assigned to the user.
	AssignedAt *string `json:"assignedAt,omitempty"`
	CreatedAt  *string `json:"createdAt,omitempty"`

	// ExpiredAt ExpiredAt specifies the time when the lease expired.
	// This is only present if the lease is expired.
	ExpiredAt *string `json:"expiredAt,omitempty"`

	// ExpiresAt ExpiresAt specifies the time when the lease will expire.
	// This is only present if the lease is active.
	ExpiresAt     *string  `json:"expiresAt,omitempty"`
	GpuGroupId    *string  `json:"gpuGroupId,omitempty"`
	Id            *string  `json:"id,omitempty"`
	LeaseDuration *float32 `json:"leaseDuration,omitempty"`
}

// BodyVmRead defines model for body.VmRead.
type BodyVmRead struct {
	AccessedAt          *string         `json:"accessedAt,omitempty"`
	CreatedAt           *string         `json:"createdAt,omitempty"`
	Gpu                 *BodyVmGpuLease `json:"gpu,omitempty"`
	Host                *string         `json:"host,omitempty"`
	Id                  *string         `json:"id,omitempty"`
	InternalName        *string         `json:"internalName,omitempty"`
	Name                *string         `json:"name,omitempty"`
	NeverStale          *bool           `json:"neverStale,omitempty"`
	OwnerId             *string         `json:"ownerId,omitempty"`
	Ports               *[]BodyPortRead `json:"ports,omitempty"`
	RepairedAt          *string         `json:"repairedAt,omitempty"`
	Specs               *BodyVmSpecs    `json:"specs,omitempty"`
	SshConnectionString *string         `json:"sshConnectionString,omitempty"`
	SshPublicKey        *string         `json:"sshPublicKey,omitempty"`
	Status              *string         `json:"status,omitempty"`
	Teams               *[]string       `json:"teams,omitempty"`
	UpdatedAt           *string         `json:"updatedAt,omitempty"`
	Zone                *string         `json:"zone,omitempty"`
}

// BodyVmSnapshotDeleted defines model for body.VmSnapshotDeleted.
type BodyVmSnapshotDeleted struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyVmSnapshotRead defines model for body.VmSnapshotRead.
type BodyVmSnapshotRead struct {
	Created *string `json:"created,omitempty"`
	Id      *string `json:"id,omitempty"`
	Name    *string `json:"name,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// BodyVmSpecs defines model for body.VmSpecs.
type BodyVmSpecs struct {
	CpuCores *int `json:"cpuCores,omitempty"`
	DiskSize *int `json:"diskSize,omitempty"`
	Ram      *int `json:"ram,omitempty"`
}

// BodyVmUpdate defines model for body.VmUpdate.
type BodyVmUpdate struct {
	CpuCores   *int              `json:"cpuCores,omitempty"`
	Name       *string           `json:"name,omitempty"`
	NeverStale *bool             `json:"neverStale,omitempty"`
	Ports      *[]BodyPortUpdate `json:"ports,omitempty"`
	Ram        *int              `json:"ram,omitempty"`
}

// BodyVmUpdated defines model for body.VmUpdated.
type BodyVmUpdated struct {
	Id    *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
}

// BodyVolume defines model for body.Volume.
type BodyVolume struct {
	AppPath    string `json:"appPath"`
	Name       string `json:"name"`
	ServerPath string `json:"serverPath"`
}

// BodyWorkerStatusRead defines model for body.WorkerStatusRead.
type BodyWorkerStatusRead struct {
	Name       *string `json:"name,omitempty"`
	ReportedAt *string `json:"reportedAt,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// BodyZoneEndpoints defines model for body.ZoneEndpoints.
type BodyZoneEndpoints struct {
	Deployment *string `json:"deployment,omitempty"`
	Storage    *string `json:"storage,omitempty"`
	Vm         *string `json:"vm,omitempty"`
	VmApp      *string `json:"vmApp,omitempty"`
}

// BodyZoneRead defines model for body.ZoneRead.
type BodyZoneRead struct {
	Capabilities *[]string          `json:"capabilities,omitempty"`
	Description  *string            `json:"description,omitempty"`
	Enabled      *bool              `json:"enabled,omitempty"`
	Endpoints    *BodyZoneEndpoints `json:"endpoints,omitempty"`
	Legacy       *bool              `json:"legacy,omitempty"`
	Name         *string            `json:"name,omitempty"`
}

// SysError defines model for sys.Error.
type SysError struct {
	Code *string `json:"code,omitempty"`
	Msg  *string `json:"msg,omitempty"`
}

// SysErrorResponse defines model for sys.ErrorResponse.
type SysErrorResponse struct {
	Errors *[]SysError `json:"errors,omitempty"`
}

// GetV2DeploymentsParams defines parameters for GetV2Deployments.
type GetV2DeploymentsParams struct {
	// All List all
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// UserId Filter by user ID
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// Shared Include shared
	Shared *bool `form:"shared,omitempty" json:"shared,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeleteV2DeploymentsDeploymentIdJSONBody defines parameters for DeleteV2DeploymentsDeploymentId.
type DeleteV2DeploymentsDeploymentIdJSONBody = map[string]interface{}

// GetV2GpuGroupsParams defines parameters for GetV2GpuGroups.
type GetV2GpuGroupsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetV2GpuLeasesParams defines parameters for GetV2GpuLeases.
type GetV2GpuLeasesParams struct {
	// All List all
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// VmId Filter by VM ID
	VmId *string `form:"vmId,omitempty" json:"vmId,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeleteV2GpuLeasesGpuLeaseIdJSONBody defines parameters for DeleteV2GpuLeasesGpuLeaseId.
type DeleteV2GpuLeasesGpuLeaseIdJSONBody = map[string]interface{}

// PostV2HooksHarborParams defines parameters for PostV2HooksHarbor.
type PostV2HooksHarborParams struct {
	// Authorization Basic auth token
	Authorization *string `json:"Authorization,omitempty"`
}

// GetV2JobsJSONBody defines parameters for GetV2Jobs.
type GetV2JobsJSONBody = map[string]interface{}

// GetV2JobsParams defines parameters for GetV2Jobs.
type GetV2JobsParams struct {
	// All List all
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// UserId Filter by user ID
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// Type Filter by type
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by status
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetV2JobsJobIdJSONBody defines parameters for GetV2JobsJobId.
type GetV2JobsJobIdJSONBody = map[string]interface{}

// GetV2NotificationsJSONBody defines parameters for GetV2Notifications.
type GetV2NotificationsJSONBody = map[string]interface{}

// GetV2NotificationsParams defines parameters for GetV2Notifications.
type GetV2NotificationsParams struct {
	// All List all notifications
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// UserId Filter by user ID
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeleteV2NotificationsNotificationIdJSONBody defines parameters for DeleteV2NotificationsNotificationId.
type DeleteV2NotificationsNotificationIdJSONBody = map[string]interface{}

// GetV2NotificationsNotificationIdJSONBody defines parameters for GetV2NotificationsNotificationId.
type GetV2NotificationsNotificationIdJSONBody = map[string]interface{}

// GetV2ResourceMigrationsParams defines parameters for GetV2ResourceMigrations.
type GetV2ResourceMigrationsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeleteV2ResourceMigrationsResourceMigrationIdJSONBody defines parameters for DeleteV2ResourceMigrationsResourceMigrationId.
type DeleteV2ResourceMigrationsResourceMigrationIdJSONBody = map[string]interface{}

// GetV2StorageManagersParams defines parameters for GetV2StorageManagers.
type GetV2StorageManagersParams struct {
	// All List all
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetV2SystemCapacitiesParams defines parameters for GetV2SystemCapacities.
type GetV2SystemCapacitiesParams struct {
	// N n
	N *int `form:"n,omitempty" json:"n,omitempty"`
}

// GetV2SystemStatsParams defines parameters for GetV2SystemStats.
type GetV2SystemStatsParams struct {
	// N n
	N *int `form:"n,omitempty" json:"n,omitempty"`
}

// GetV2SystemStatusParams defines parameters for GetV2SystemStatus.
type GetV2SystemStatusParams struct {
	// N n
	N *int `form:"n,omitempty" json:"n,omitempty"`
}

// GetV2TeamsJSONBody defines parameters for GetV2Teams.
type GetV2TeamsJSONBody = map[string]interface{}

// GetV2TeamsParams defines parameters for GetV2Teams.
type GetV2TeamsParams struct {
	// All List all
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// UserId Filter by user ID
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeleteV2TeamsTeamIdJSONBody defines parameters for DeleteV2TeamsTeamId.
type DeleteV2TeamsTeamIdJSONBody = map[string]interface{}

// GetV2TeamsTeamIdJSONBody defines parameters for GetV2TeamsTeamId.
type GetV2TeamsTeamIdJSONBody = map[string]interface{}

// GetV2UsersParams defines parameters for GetV2Users.
type GetV2UsersParams struct {
	// All List all
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// Discover Discovery mode
	Discover *bool `form:"discover,omitempty" json:"discover,omitempty"`

	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetV2UsersUserIdParams defines parameters for GetV2UsersUserId.
type GetV2UsersUserIdParams struct {
	// Discover Discovery mode
	Discover *bool `form:"discover,omitempty" json:"discover,omitempty"`
}

// GetV2VmsParams defines parameters for GetV2Vms.
type GetV2VmsParams struct {
	// All List all
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// UserId Filter by user ID
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeleteV2VmsVmIdJSONBody defines parameters for DeleteV2VmsVmId.
type DeleteV2VmsVmIdJSONBody = map[string]interface{}

// DeleteV2VmsVmIdSnapshotSnapshotIdJSONBody defines parameters for DeleteV2VmsVmIdSnapshotSnapshotId.
type DeleteV2VmsVmIdSnapshotSnapshotIdJSONBody = map[string]interface{}

// PostV2VmsVmIdSnapshotSnapshotIdJSONBody defines parameters for PostV2VmsVmIdSnapshotSnapshotId.
type PostV2VmsVmIdSnapshotSnapshotIdJSONBody = map[string]interface{}

// PostV2DeploymentsJSONRequestBody defines body for PostV2Deployments for application/json ContentType.
type PostV2DeploymentsJSONRequestBody = BodyDeploymentCreate

// DeleteV2DeploymentsDeploymentIdJSONRequestBody defines body for DeleteV2DeploymentsDeploymentId for application/json ContentType.
type DeleteV2DeploymentsDeploymentIdJSONRequestBody = DeleteV2DeploymentsDeploymentIdJSONBody

// PostV2DeploymentsDeploymentIdJSONRequestBody defines body for PostV2DeploymentsDeploymentId for application/json ContentType.
type PostV2DeploymentsDeploymentIdJSONRequestBody = BodyDeploymentUpdate

// PostV2DeploymentsDeploymentIdCommandJSONRequestBody defines body for PostV2DeploymentsDeploymentIdCommand for application/json ContentType.
type PostV2DeploymentsDeploymentIdCommandJSONRequestBody = BodyDeploymentCommand

// PostV2GpuLeasesJSONRequestBody defines body for PostV2GpuLeases for application/json ContentType.
type PostV2GpuLeasesJSONRequestBody = BodyGpuLeaseCreate

// DeleteV2GpuLeasesGpuLeaseIdJSONRequestBody defines body for DeleteV2GpuLeasesGpuLeaseId for application/json ContentType.
type DeleteV2GpuLeasesGpuLeaseIdJSONRequestBody = DeleteV2GpuLeasesGpuLeaseIdJSONBody

// PostV2GpuLeasesGpuLeaseIdJSONRequestBody defines body for PostV2GpuLeasesGpuLeaseId for application/json ContentType.
type PostV2GpuLeasesGpuLeaseIdJSONRequestBody = BodyGpuLeaseUpdate

// PostV2HooksHarborJSONRequestBody defines body for PostV2HooksHarbor for application/json ContentType.
type PostV2HooksHarborJSONRequestBody = BodyHarborWebhook

// GetV2JobsJSONRequestBody defines body for GetV2Jobs for application/json ContentType.
type GetV2JobsJSONRequestBody = GetV2JobsJSONBody

// GetV2JobsJobIdJSONRequestBody defines body for GetV2JobsJobId for application/json ContentType.
type GetV2JobsJobIdJSONRequestBody = GetV2JobsJobIdJSONBody

// PostV2JobsJobIdJSONRequestBody defines body for PostV2JobsJobId for application/json ContentType.
type PostV2JobsJobIdJSONRequestBody = BodyJobUpdate

// GetV2NotificationsJSONRequestBody defines body for GetV2Notifications for application/json ContentType.
type GetV2NotificationsJSONRequestBody = GetV2NotificationsJSONBody

// DeleteV2NotificationsNotificationIdJSONRequestBody defines body for DeleteV2NotificationsNotificationId for application/json ContentType.
type DeleteV2NotificationsNotificationIdJSONRequestBody = DeleteV2NotificationsNotificationIdJSONBody

// GetV2NotificationsNotificationIdJSONRequestBody defines body for GetV2NotificationsNotificationId for application/json ContentType.
type GetV2NotificationsNotificationIdJSONRequestBody = GetV2NotificationsNotificationIdJSONBody

// PostV2NotificationsNotificationIdJSONRequestBody defines body for PostV2NotificationsNotificationId for application/json ContentType.
type PostV2NotificationsNotificationIdJSONRequestBody = BodyNotificationUpdate

// PostV2ResourceMigrationsJSONRequestBody defines body for PostV2ResourceMigrations for application/json ContentType.
type PostV2ResourceMigrationsJSONRequestBody = BodyResourceMigrationCreate

// DeleteV2ResourceMigrationsResourceMigrationIdJSONRequestBody defines body for DeleteV2ResourceMigrationsResourceMigrationId for application/json ContentType.
type DeleteV2ResourceMigrationsResourceMigrationIdJSONRequestBody = DeleteV2ResourceMigrationsResourceMigrationIdJSONBody

// PostV2ResourceMigrationsResourceMigrationIdJSONRequestBody defines body for PostV2ResourceMigrationsResourceMigrationId for application/json ContentType.
type PostV2ResourceMigrationsResourceMigrationIdJSONRequestBody = BodyResourceMigrationUpdate

// GetV2TeamsJSONRequestBody defines body for GetV2Teams for application/json ContentType.
type GetV2TeamsJSONRequestBody = GetV2TeamsJSONBody

// PostV2TeamsJSONRequestBody defines body for PostV2Teams for application/json ContentType.
type PostV2TeamsJSONRequestBody = BodyTeamCreate

// DeleteV2TeamsTeamIdJSONRequestBody defines body for DeleteV2TeamsTeamId for application/json ContentType.
type DeleteV2TeamsTeamIdJSONRequestBody = DeleteV2TeamsTeamIdJSONBody

// GetV2TeamsTeamIdJSONRequestBody defines body for GetV2TeamsTeamId for application/json ContentType.
type GetV2TeamsTeamIdJSONRequestBody = GetV2TeamsTeamIdJSONBody

// PostV2TeamsTeamIdJSONRequestBody defines body for PostV2TeamsTeamId for application/json ContentType.
type PostV2TeamsTeamIdJSONRequestBody = BodyTeamUpdate

// PostV2UsersUserIdJSONRequestBody defines body for PostV2UsersUserId for application/json ContentType.
type PostV2UsersUserIdJSONRequestBody = BodyUserUpdate

// PostV2UsersUserIdApiKeysJSONRequestBody defines body for PostV2UsersUserIdApiKeys for application/json ContentType.
type PostV2UsersUserIdApiKeysJSONRequestBody = BodyApiKeyCreate

// PostV2VmsJSONRequestBody defines body for PostV2Vms for application/json ContentType.
type PostV2VmsJSONRequestBody = BodyVmCreate

// DeleteV2VmsVmIdJSONRequestBody defines body for DeleteV2VmsVmId for application/json ContentType.
type DeleteV2VmsVmIdJSONRequestBody = DeleteV2VmsVmIdJSONBody

// PostV2VmsVmIdJSONRequestBody defines body for PostV2VmsVmId for application/json ContentType.
type PostV2VmsVmIdJSONRequestBody = BodyVmUpdate

// DeleteV2VmsVmIdSnapshotSnapshotIdJSONRequestBody defines body for DeleteV2VmsVmIdSnapshotSnapshotId for application/json ContentType.
type DeleteV2VmsVmIdSnapshotSnapshotIdJSONRequestBody = DeleteV2VmsVmIdSnapshotSnapshotIdJSONBody

// PostV2VmsVmIdSnapshotSnapshotIdJSONRequestBody defines body for PostV2VmsVmIdSnapshotSnapshotId for application/json ContentType.
type PostV2VmsVmIdSnapshotSnapshotIdJSONRequestBody = PostV2VmsVmIdSnapshotSnapshotIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV2Deployments request
	GetV2Deployments(ctx context.Context, params *GetV2DeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2DeploymentsWithBody request with any body
	PostV2DeploymentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2Deployments(ctx context.Context, body PostV2DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2DeploymentsDeploymentIdWithBody request with any body
	DeleteV2DeploymentsDeploymentIdWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV2DeploymentsDeploymentId(ctx context.Context, deploymentId string, body DeleteV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DeploymentsDeploymentId request
	GetV2DeploymentsDeploymentId(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2DeploymentsDeploymentIdWithBody request with any body
	PostV2DeploymentsDeploymentIdWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2DeploymentsDeploymentId(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DeploymentsDeploymentIdCiConfig request
	GetV2DeploymentsDeploymentIdCiConfig(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2DeploymentsDeploymentIdCommandWithBody request with any body
	PostV2DeploymentsDeploymentIdCommandWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2DeploymentsDeploymentIdCommand(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DeploymentsDeploymentIdLogs request
	GetV2DeploymentsDeploymentIdLogs(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Discover request
	GetV2Discover(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2GpuGroups request
	GetV2GpuGroups(ctx context.Context, params *GetV2GpuGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2GpuGroupsGpuGroupId request
	GetV2GpuGroupsGpuGroupId(ctx context.Context, gpuGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2GpuLeases request
	GetV2GpuLeases(ctx context.Context, params *GetV2GpuLeasesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2GpuLeasesWithBody request with any body
	PostV2GpuLeasesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2GpuLeases(ctx context.Context, body PostV2GpuLeasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2GpuLeasesGpuLeaseIdWithBody request with any body
	DeleteV2GpuLeasesGpuLeaseIdWithBody(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV2GpuLeasesGpuLeaseId(ctx context.Context, gpuLeaseId string, body DeleteV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2GpuLeasesGpuLeaseId request
	GetV2GpuLeasesGpuLeaseId(ctx context.Context, gpuLeaseId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2GpuLeasesGpuLeaseIdWithBody request with any body
	PostV2GpuLeasesGpuLeaseIdWithBody(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2GpuLeasesGpuLeaseId(ctx context.Context, gpuLeaseId string, body PostV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2HooksHarborWithBody request with any body
	PostV2HooksHarborWithBody(ctx context.Context, params *PostV2HooksHarborParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2HooksHarbor(ctx context.Context, params *PostV2HooksHarborParams, body PostV2HooksHarborJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Hosts request
	GetV2Hosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2HostsVerbose request
	GetV2HostsVerbose(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2JobsWithBody request with any body
	GetV2JobsWithBody(ctx context.Context, params *GetV2JobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetV2Jobs(ctx context.Context, params *GetV2JobsParams, body GetV2JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2JobsJobIdWithBody request with any body
	GetV2JobsJobIdWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetV2JobsJobId(ctx context.Context, jobId string, body GetV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2JobsJobIdWithBody request with any body
	PostV2JobsJobIdWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2JobsJobId(ctx context.Context, jobId string, body PostV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Metrics request
	GetV2Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2NotificationsWithBody request with any body
	GetV2NotificationsWithBody(ctx context.Context, params *GetV2NotificationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetV2Notifications(ctx context.Context, params *GetV2NotificationsParams, body GetV2NotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2NotificationsNotificationIdWithBody request with any body
	DeleteV2NotificationsNotificationIdWithBody(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV2NotificationsNotificationId(ctx context.Context, notificationId string, body DeleteV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2NotificationsNotificationIdWithBody request with any body
	GetV2NotificationsNotificationIdWithBody(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetV2NotificationsNotificationId(ctx context.Context, notificationId string, body GetV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2NotificationsNotificationIdWithBody request with any body
	PostV2NotificationsNotificationIdWithBody(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2NotificationsNotificationId(ctx context.Context, notificationId string, body PostV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Register request
	GetV2Register(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ResourceMigrations request
	GetV2ResourceMigrations(ctx context.Context, params *GetV2ResourceMigrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2ResourceMigrationsWithBody request with any body
	PostV2ResourceMigrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2ResourceMigrations(ctx context.Context, body PostV2ResourceMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2ResourceMigrationsResourceMigrationIdWithBody request with any body
	DeleteV2ResourceMigrationsResourceMigrationIdWithBody(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV2ResourceMigrationsResourceMigrationId(ctx context.Context, resourceMigrationId string, body DeleteV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ResourceMigrationsResourceMigrationId request
	GetV2ResourceMigrationsResourceMigrationId(ctx context.Context, resourceMigrationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2ResourceMigrationsResourceMigrationIdWithBody request with any body
	PostV2ResourceMigrationsResourceMigrationIdWithBody(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2ResourceMigrationsResourceMigrationId(ctx context.Context, resourceMigrationId string, body PostV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StorageManagers request
	GetV2StorageManagers(ctx context.Context, params *GetV2StorageManagersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2StorageManagersStorageManagerId request
	DeleteV2StorageManagersStorageManagerId(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StorageManagersStorageManagerId request
	GetV2StorageManagersStorageManagerId(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemCapacities request
	GetV2SystemCapacities(ctx context.Context, params *GetV2SystemCapacitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemStats request
	GetV2SystemStats(ctx context.Context, params *GetV2SystemStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemStatus request
	GetV2SystemStatus(ctx context.Context, params *GetV2SystemStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2TeamsWithBody request with any body
	GetV2TeamsWithBody(ctx context.Context, params *GetV2TeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetV2Teams(ctx context.Context, params *GetV2TeamsParams, body GetV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2TeamsWithBody request with any body
	PostV2TeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2Teams(ctx context.Context, body PostV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2TeamsTeamIdWithBody request with any body
	DeleteV2TeamsTeamIdWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV2TeamsTeamId(ctx context.Context, teamId string, body DeleteV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2TeamsTeamIdWithBody request with any body
	GetV2TeamsTeamIdWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetV2TeamsTeamId(ctx context.Context, teamId string, body GetV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2TeamsTeamIdWithBody request with any body
	PostV2TeamsTeamIdWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2TeamsTeamId(ctx context.Context, teamId string, body PostV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Users request
	GetV2Users(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2UsersUserId request
	GetV2UsersUserId(ctx context.Context, userId string, params *GetV2UsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2UsersUserIdWithBody request with any body
	PostV2UsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2UsersUserId(ctx context.Context, userId string, body PostV2UsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2UsersUserIdApiKeysWithBody request with any body
	PostV2UsersUserIdApiKeysWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2UsersUserIdApiKeys(ctx context.Context, userId string, body PostV2UsersUserIdApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Vms request
	GetV2Vms(ctx context.Context, params *GetV2VmsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2VmsWithBody request with any body
	PostV2VmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2Vms(ctx context.Context, body PostV2VmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2VmsVmIdWithBody request with any body
	DeleteV2VmsVmIdWithBody(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV2VmsVmId(ctx context.Context, vmId string, body DeleteV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2VmsVmId request
	GetV2VmsVmId(ctx context.Context, vmId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2VmsVmIdWithBody request with any body
	PostV2VmsVmIdWithBody(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2VmsVmId(ctx context.Context, vmId string, body PostV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2VmsVmIdSnapshotSnapshotIdWithBody request with any body
	DeleteV2VmsVmIdSnapshotSnapshotIdWithBody(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV2VmsVmIdSnapshotSnapshotId(ctx context.Context, vmId string, snapshotId string, body DeleteV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2VmsVmIdSnapshotSnapshotIdWithBody request with any body
	PostV2VmsVmIdSnapshotSnapshotIdWithBody(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2VmsVmIdSnapshotSnapshotId(ctx context.Context, vmId string, snapshotId string, body PostV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2WorkerStatus request
	GetV2WorkerStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Zones request
	GetV2Zones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV2Deployments(ctx context.Context, params *GetV2DeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DeploymentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DeploymentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DeploymentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2Deployments(ctx context.Context, body PostV2DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DeploymentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2DeploymentsDeploymentIdWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2DeploymentsDeploymentIdRequestWithBody(c.Server, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2DeploymentsDeploymentId(ctx context.Context, deploymentId string, body DeleteV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2DeploymentsDeploymentIdRequest(c.Server, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DeploymentsDeploymentId(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DeploymentsDeploymentIdRequest(c.Server, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DeploymentsDeploymentIdWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DeploymentsDeploymentIdRequestWithBody(c.Server, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DeploymentsDeploymentId(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DeploymentsDeploymentIdRequest(c.Server, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DeploymentsDeploymentIdCiConfig(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DeploymentsDeploymentIdCiConfigRequest(c.Server, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DeploymentsDeploymentIdCommandWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DeploymentsDeploymentIdCommandRequestWithBody(c.Server, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DeploymentsDeploymentIdCommand(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DeploymentsDeploymentIdCommandRequest(c.Server, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DeploymentsDeploymentIdLogs(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DeploymentsDeploymentIdLogsRequest(c.Server, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Discover(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DiscoverRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2GpuGroups(ctx context.Context, params *GetV2GpuGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2GpuGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2GpuGroupsGpuGroupId(ctx context.Context, gpuGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2GpuGroupsGpuGroupIdRequest(c.Server, gpuGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2GpuLeases(ctx context.Context, params *GetV2GpuLeasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2GpuLeasesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2GpuLeasesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2GpuLeasesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2GpuLeases(ctx context.Context, body PostV2GpuLeasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2GpuLeasesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2GpuLeasesGpuLeaseIdWithBody(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2GpuLeasesGpuLeaseIdRequestWithBody(c.Server, gpuLeaseId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2GpuLeasesGpuLeaseId(ctx context.Context, gpuLeaseId string, body DeleteV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2GpuLeasesGpuLeaseIdRequest(c.Server, gpuLeaseId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2GpuLeasesGpuLeaseId(ctx context.Context, gpuLeaseId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2GpuLeasesGpuLeaseIdRequest(c.Server, gpuLeaseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2GpuLeasesGpuLeaseIdWithBody(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2GpuLeasesGpuLeaseIdRequestWithBody(c.Server, gpuLeaseId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2GpuLeasesGpuLeaseId(ctx context.Context, gpuLeaseId string, body PostV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2GpuLeasesGpuLeaseIdRequest(c.Server, gpuLeaseId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2HooksHarborWithBody(ctx context.Context, params *PostV2HooksHarborParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2HooksHarborRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2HooksHarbor(ctx context.Context, params *PostV2HooksHarborParams, body PostV2HooksHarborJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2HooksHarborRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Hosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2HostsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2HostsVerbose(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2HostsVerboseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JobsWithBody(ctx context.Context, params *GetV2JobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JobsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Jobs(ctx context.Context, params *GetV2JobsParams, body GetV2JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JobsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JobsJobIdWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JobsJobIdRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JobsJobId(ctx context.Context, jobId string, body GetV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JobsJobIdRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2JobsJobIdWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2JobsJobIdRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2JobsJobId(ctx context.Context, jobId string, body PostV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2JobsJobIdRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2NotificationsWithBody(ctx context.Context, params *GetV2NotificationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2NotificationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Notifications(ctx context.Context, params *GetV2NotificationsParams, body GetV2NotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2NotificationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2NotificationsNotificationIdWithBody(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2NotificationsNotificationIdRequestWithBody(c.Server, notificationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2NotificationsNotificationId(ctx context.Context, notificationId string, body DeleteV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2NotificationsNotificationIdRequest(c.Server, notificationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2NotificationsNotificationIdWithBody(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2NotificationsNotificationIdRequestWithBody(c.Server, notificationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2NotificationsNotificationId(ctx context.Context, notificationId string, body GetV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2NotificationsNotificationIdRequest(c.Server, notificationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2NotificationsNotificationIdWithBody(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2NotificationsNotificationIdRequestWithBody(c.Server, notificationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2NotificationsNotificationId(ctx context.Context, notificationId string, body PostV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2NotificationsNotificationIdRequest(c.Server, notificationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Register(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2RegisterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ResourceMigrations(ctx context.Context, params *GetV2ResourceMigrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ResourceMigrationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ResourceMigrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ResourceMigrationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ResourceMigrations(ctx context.Context, body PostV2ResourceMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ResourceMigrationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2ResourceMigrationsResourceMigrationIdWithBody(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2ResourceMigrationsResourceMigrationIdRequestWithBody(c.Server, resourceMigrationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2ResourceMigrationsResourceMigrationId(ctx context.Context, resourceMigrationId string, body DeleteV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2ResourceMigrationsResourceMigrationIdRequest(c.Server, resourceMigrationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ResourceMigrationsResourceMigrationId(ctx context.Context, resourceMigrationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ResourceMigrationsResourceMigrationIdRequest(c.Server, resourceMigrationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ResourceMigrationsResourceMigrationIdWithBody(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ResourceMigrationsResourceMigrationIdRequestWithBody(c.Server, resourceMigrationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ResourceMigrationsResourceMigrationId(ctx context.Context, resourceMigrationId string, body PostV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ResourceMigrationsResourceMigrationIdRequest(c.Server, resourceMigrationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StorageManagers(ctx context.Context, params *GetV2StorageManagersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StorageManagersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2StorageManagersStorageManagerId(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2StorageManagersStorageManagerIdRequest(c.Server, storageManagerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StorageManagersStorageManagerId(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StorageManagersStorageManagerIdRequest(c.Server, storageManagerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemCapacities(ctx context.Context, params *GetV2SystemCapacitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemCapacitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemStats(ctx context.Context, params *GetV2SystemStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemStatus(ctx context.Context, params *GetV2SystemStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2TeamsWithBody(ctx context.Context, params *GetV2TeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TeamsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Teams(ctx context.Context, params *GetV2TeamsParams, body GetV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TeamsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2TeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2TeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2Teams(ctx context.Context, body PostV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2TeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2TeamsTeamIdWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2TeamsTeamIdRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2TeamsTeamId(ctx context.Context, teamId string, body DeleteV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2TeamsTeamIdRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2TeamsTeamIdWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TeamsTeamIdRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2TeamsTeamId(ctx context.Context, teamId string, body GetV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TeamsTeamIdRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2TeamsTeamIdWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2TeamsTeamIdRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2TeamsTeamId(ctx context.Context, teamId string, body PostV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2TeamsTeamIdRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Users(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2UsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2UsersUserId(ctx context.Context, userId string, params *GetV2UsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2UsersUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2UsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2UsersUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2UsersUserId(ctx context.Context, userId string, body PostV2UsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2UsersUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2UsersUserIdApiKeysWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2UsersUserIdApiKeysRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2UsersUserIdApiKeys(ctx context.Context, userId string, body PostV2UsersUserIdApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2UsersUserIdApiKeysRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Vms(ctx context.Context, params *GetV2VmsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2VmsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2VmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2VmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2Vms(ctx context.Context, body PostV2VmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2VmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2VmsVmIdWithBody(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2VmsVmIdRequestWithBody(c.Server, vmId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2VmsVmId(ctx context.Context, vmId string, body DeleteV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2VmsVmIdRequest(c.Server, vmId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2VmsVmId(ctx context.Context, vmId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2VmsVmIdRequest(c.Server, vmId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2VmsVmIdWithBody(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2VmsVmIdRequestWithBody(c.Server, vmId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2VmsVmId(ctx context.Context, vmId string, body PostV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2VmsVmIdRequest(c.Server, vmId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2VmsVmIdSnapshotSnapshotIdWithBody(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2VmsVmIdSnapshotSnapshotIdRequestWithBody(c.Server, vmId, snapshotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2VmsVmIdSnapshotSnapshotId(ctx context.Context, vmId string, snapshotId string, body DeleteV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2VmsVmIdSnapshotSnapshotIdRequest(c.Server, vmId, snapshotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2VmsVmIdSnapshotSnapshotIdWithBody(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2VmsVmIdSnapshotSnapshotIdRequestWithBody(c.Server, vmId, snapshotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2VmsVmIdSnapshotSnapshotId(ctx context.Context, vmId string, snapshotId string, body PostV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2VmsVmIdSnapshotSnapshotIdRequest(c.Server, vmId, snapshotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2WorkerStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2WorkerStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Zones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ZonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV2DeploymentsRequest generates requests for GetV2Deployments
func NewGetV2DeploymentsRequest(server string, params *GetV2DeploymentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shared != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shared", runtime.ParamLocationQuery, *params.Shared); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2DeploymentsRequest calls the generic PostV2Deployments builder with application/json body
func NewPostV2DeploymentsRequest(server string, body PostV2DeploymentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2DeploymentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2DeploymentsRequestWithBody generates requests for PostV2Deployments with any type of body
func NewPostV2DeploymentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2DeploymentsDeploymentIdRequest calls the generic DeleteV2DeploymentsDeploymentId builder with application/json body
func NewDeleteV2DeploymentsDeploymentIdRequest(server string, deploymentId string, body DeleteV2DeploymentsDeploymentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV2DeploymentsDeploymentIdRequestWithBody(server, deploymentId, "application/json", bodyReader)
}

// NewDeleteV2DeploymentsDeploymentIdRequestWithBody generates requests for DeleteV2DeploymentsDeploymentId with any type of body
func NewDeleteV2DeploymentsDeploymentIdRequestWithBody(server string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2DeploymentsDeploymentIdRequest generates requests for GetV2DeploymentsDeploymentId
func NewGetV2DeploymentsDeploymentIdRequest(server string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2DeploymentsDeploymentIdRequest calls the generic PostV2DeploymentsDeploymentId builder with application/json body
func NewPostV2DeploymentsDeploymentIdRequest(server string, deploymentId string, body PostV2DeploymentsDeploymentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2DeploymentsDeploymentIdRequestWithBody(server, deploymentId, "application/json", bodyReader)
}

// NewPostV2DeploymentsDeploymentIdRequestWithBody generates requests for PostV2DeploymentsDeploymentId with any type of body
func NewPostV2DeploymentsDeploymentIdRequestWithBody(server string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2DeploymentsDeploymentIdCiConfigRequest generates requests for GetV2DeploymentsDeploymentIdCiConfig
func NewGetV2DeploymentsDeploymentIdCiConfigRequest(server string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments/%s/ciConfig", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2DeploymentsDeploymentIdCommandRequest calls the generic PostV2DeploymentsDeploymentIdCommand builder with application/json body
func NewPostV2DeploymentsDeploymentIdCommandRequest(server string, deploymentId string, body PostV2DeploymentsDeploymentIdCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2DeploymentsDeploymentIdCommandRequestWithBody(server, deploymentId, "application/json", bodyReader)
}

// NewPostV2DeploymentsDeploymentIdCommandRequestWithBody generates requests for PostV2DeploymentsDeploymentIdCommand with any type of body
func NewPostV2DeploymentsDeploymentIdCommandRequestWithBody(server string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments/%s/command", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2DeploymentsDeploymentIdLogsRequest generates requests for GetV2DeploymentsDeploymentIdLogs
func NewGetV2DeploymentsDeploymentIdLogsRequest(server string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/deployments/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DiscoverRequest generates requests for GetV2Discover
func NewGetV2DiscoverRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/discover")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2GpuGroupsRequest generates requests for GetV2GpuGroups
func NewGetV2GpuGroupsRequest(server string, params *GetV2GpuGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/gpuGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2GpuGroupsGpuGroupIdRequest generates requests for GetV2GpuGroupsGpuGroupId
func NewGetV2GpuGroupsGpuGroupIdRequest(server string, gpuGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gpuGroupId", runtime.ParamLocationPath, gpuGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/gpuGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2GpuLeasesRequest generates requests for GetV2GpuLeases
func NewGetV2GpuLeasesRequest(server string, params *GetV2GpuLeasesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/gpuLeases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VmId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vmId", runtime.ParamLocationQuery, *params.VmId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2GpuLeasesRequest calls the generic PostV2GpuLeases builder with application/json body
func NewPostV2GpuLeasesRequest(server string, body PostV2GpuLeasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2GpuLeasesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2GpuLeasesRequestWithBody generates requests for PostV2GpuLeases with any type of body
func NewPostV2GpuLeasesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/gpuLeases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2GpuLeasesGpuLeaseIdRequest calls the generic DeleteV2GpuLeasesGpuLeaseId builder with application/json body
func NewDeleteV2GpuLeasesGpuLeaseIdRequest(server string, gpuLeaseId string, body DeleteV2GpuLeasesGpuLeaseIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV2GpuLeasesGpuLeaseIdRequestWithBody(server, gpuLeaseId, "application/json", bodyReader)
}

// NewDeleteV2GpuLeasesGpuLeaseIdRequestWithBody generates requests for DeleteV2GpuLeasesGpuLeaseId with any type of body
func NewDeleteV2GpuLeasesGpuLeaseIdRequestWithBody(server string, gpuLeaseId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gpuLeaseId", runtime.ParamLocationPath, gpuLeaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/gpuLeases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2GpuLeasesGpuLeaseIdRequest generates requests for GetV2GpuLeasesGpuLeaseId
func NewGetV2GpuLeasesGpuLeaseIdRequest(server string, gpuLeaseId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gpuLeaseId", runtime.ParamLocationPath, gpuLeaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/gpuLeases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2GpuLeasesGpuLeaseIdRequest calls the generic PostV2GpuLeasesGpuLeaseId builder with application/json body
func NewPostV2GpuLeasesGpuLeaseIdRequest(server string, gpuLeaseId string, body PostV2GpuLeasesGpuLeaseIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2GpuLeasesGpuLeaseIdRequestWithBody(server, gpuLeaseId, "application/json", bodyReader)
}

// NewPostV2GpuLeasesGpuLeaseIdRequestWithBody generates requests for PostV2GpuLeasesGpuLeaseId with any type of body
func NewPostV2GpuLeasesGpuLeaseIdRequestWithBody(server string, gpuLeaseId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gpuLeaseId", runtime.ParamLocationPath, gpuLeaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/gpuLeases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2HooksHarborRequest calls the generic PostV2HooksHarbor builder with application/json body
func NewPostV2HooksHarborRequest(server string, params *PostV2HooksHarborParams, body PostV2HooksHarborJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2HooksHarborRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV2HooksHarborRequestWithBody generates requests for PostV2HooksHarbor with any type of body
func NewPostV2HooksHarborRequestWithBody(server string, params *PostV2HooksHarborParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/hooks/harbor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2HostsRequest generates requests for GetV2Hosts
func NewGetV2HostsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2HostsVerboseRequest generates requests for GetV2HostsVerbose
func NewGetV2HostsVerboseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/hosts/verbose")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2JobsRequest calls the generic GetV2Jobs builder with application/json body
func NewGetV2JobsRequest(server string, params *GetV2JobsParams, body GetV2JobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetV2JobsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetV2JobsRequestWithBody generates requests for GetV2Jobs with any type of body
func NewGetV2JobsRequestWithBody(server string, params *GetV2JobsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2JobsJobIdRequest calls the generic GetV2JobsJobId builder with application/json body
func NewGetV2JobsJobIdRequest(server string, jobId string, body GetV2JobsJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetV2JobsJobIdRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewGetV2JobsJobIdRequestWithBody generates requests for GetV2JobsJobId with any type of body
func NewGetV2JobsJobIdRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2JobsJobIdRequest calls the generic PostV2JobsJobId builder with application/json body
func NewPostV2JobsJobIdRequest(server string, jobId string, body PostV2JobsJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2JobsJobIdRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewPostV2JobsJobIdRequestWithBody generates requests for PostV2JobsJobId with any type of body
func NewPostV2JobsJobIdRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MetricsRequest generates requests for GetV2Metrics
func NewGetV2MetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2NotificationsRequest calls the generic GetV2Notifications builder with application/json body
func NewGetV2NotificationsRequest(server string, params *GetV2NotificationsParams, body GetV2NotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetV2NotificationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetV2NotificationsRequestWithBody generates requests for GetV2Notifications with any type of body
func NewGetV2NotificationsRequestWithBody(server string, params *GetV2NotificationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2NotificationsNotificationIdRequest calls the generic DeleteV2NotificationsNotificationId builder with application/json body
func NewDeleteV2NotificationsNotificationIdRequest(server string, notificationId string, body DeleteV2NotificationsNotificationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV2NotificationsNotificationIdRequestWithBody(server, notificationId, "application/json", bodyReader)
}

// NewDeleteV2NotificationsNotificationIdRequestWithBody generates requests for DeleteV2NotificationsNotificationId with any type of body
func NewDeleteV2NotificationsNotificationIdRequestWithBody(server string, notificationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationId", runtime.ParamLocationPath, notificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2NotificationsNotificationIdRequest calls the generic GetV2NotificationsNotificationId builder with application/json body
func NewGetV2NotificationsNotificationIdRequest(server string, notificationId string, body GetV2NotificationsNotificationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetV2NotificationsNotificationIdRequestWithBody(server, notificationId, "application/json", bodyReader)
}

// NewGetV2NotificationsNotificationIdRequestWithBody generates requests for GetV2NotificationsNotificationId with any type of body
func NewGetV2NotificationsNotificationIdRequestWithBody(server string, notificationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationId", runtime.ParamLocationPath, notificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2NotificationsNotificationIdRequest calls the generic PostV2NotificationsNotificationId builder with application/json body
func NewPostV2NotificationsNotificationIdRequest(server string, notificationId string, body PostV2NotificationsNotificationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2NotificationsNotificationIdRequestWithBody(server, notificationId, "application/json", bodyReader)
}

// NewPostV2NotificationsNotificationIdRequestWithBody generates requests for PostV2NotificationsNotificationId with any type of body
func NewPostV2NotificationsNotificationIdRequestWithBody(server string, notificationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationId", runtime.ParamLocationPath, notificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2RegisterRequest generates requests for GetV2Register
func NewGetV2RegisterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ResourceMigrationsRequest generates requests for GetV2ResourceMigrations
func NewGetV2ResourceMigrationsRequest(server string, params *GetV2ResourceMigrationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/resourceMigrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2ResourceMigrationsRequest calls the generic PostV2ResourceMigrations builder with application/json body
func NewPostV2ResourceMigrationsRequest(server string, body PostV2ResourceMigrationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ResourceMigrationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2ResourceMigrationsRequestWithBody generates requests for PostV2ResourceMigrations with any type of body
func NewPostV2ResourceMigrationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/resourceMigrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2ResourceMigrationsResourceMigrationIdRequest calls the generic DeleteV2ResourceMigrationsResourceMigrationId builder with application/json body
func NewDeleteV2ResourceMigrationsResourceMigrationIdRequest(server string, resourceMigrationId string, body DeleteV2ResourceMigrationsResourceMigrationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV2ResourceMigrationsResourceMigrationIdRequestWithBody(server, resourceMigrationId, "application/json", bodyReader)
}

// NewDeleteV2ResourceMigrationsResourceMigrationIdRequestWithBody generates requests for DeleteV2ResourceMigrationsResourceMigrationId with any type of body
func NewDeleteV2ResourceMigrationsResourceMigrationIdRequestWithBody(server string, resourceMigrationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceMigrationId", runtime.ParamLocationPath, resourceMigrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/resourceMigrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2ResourceMigrationsResourceMigrationIdRequest generates requests for GetV2ResourceMigrationsResourceMigrationId
func NewGetV2ResourceMigrationsResourceMigrationIdRequest(server string, resourceMigrationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceMigrationId", runtime.ParamLocationPath, resourceMigrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/resourceMigrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2ResourceMigrationsResourceMigrationIdRequest calls the generic PostV2ResourceMigrationsResourceMigrationId builder with application/json body
func NewPostV2ResourceMigrationsResourceMigrationIdRequest(server string, resourceMigrationId string, body PostV2ResourceMigrationsResourceMigrationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ResourceMigrationsResourceMigrationIdRequestWithBody(server, resourceMigrationId, "application/json", bodyReader)
}

// NewPostV2ResourceMigrationsResourceMigrationIdRequestWithBody generates requests for PostV2ResourceMigrationsResourceMigrationId with any type of body
func NewPostV2ResourceMigrationsResourceMigrationIdRequestWithBody(server string, resourceMigrationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceMigrationId", runtime.ParamLocationPath, resourceMigrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/resourceMigrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2StorageManagersRequest generates requests for GetV2StorageManagers
func NewGetV2StorageManagersRequest(server string, params *GetV2StorageManagersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/storageManagers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV2StorageManagersStorageManagerIdRequest generates requests for DeleteV2StorageManagersStorageManagerId
func NewDeleteV2StorageManagersStorageManagerIdRequest(server string, storageManagerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storageManagerId", runtime.ParamLocationPath, storageManagerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/storageManagers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2StorageManagersStorageManagerIdRequest generates requests for GetV2StorageManagersStorageManagerId
func NewGetV2StorageManagersStorageManagerIdRequest(server string, storageManagerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storageManagerId", runtime.ParamLocationPath, storageManagerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/storageManagers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SystemCapacitiesRequest generates requests for GetV2SystemCapacities
func NewGetV2SystemCapacitiesRequest(server string, params *GetV2SystemCapacitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systemCapacities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.N != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "n", runtime.ParamLocationQuery, *params.N); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SystemStatsRequest generates requests for GetV2SystemStats
func NewGetV2SystemStatsRequest(server string, params *GetV2SystemStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systemStats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.N != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "n", runtime.ParamLocationQuery, *params.N); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SystemStatusRequest generates requests for GetV2SystemStatus
func NewGetV2SystemStatusRequest(server string, params *GetV2SystemStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systemStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.N != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "n", runtime.ParamLocationQuery, *params.N); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2TeamsRequest calls the generic GetV2Teams builder with application/json body
func NewGetV2TeamsRequest(server string, params *GetV2TeamsParams, body GetV2TeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetV2TeamsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetV2TeamsRequestWithBody generates requests for GetV2Teams with any type of body
func NewGetV2TeamsRequestWithBody(server string, params *GetV2TeamsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2TeamsRequest calls the generic PostV2Teams builder with application/json body
func NewPostV2TeamsRequest(server string, body PostV2TeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2TeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2TeamsRequestWithBody generates requests for PostV2Teams with any type of body
func NewPostV2TeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2TeamsTeamIdRequest calls the generic DeleteV2TeamsTeamId builder with application/json body
func NewDeleteV2TeamsTeamIdRequest(server string, teamId string, body DeleteV2TeamsTeamIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV2TeamsTeamIdRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewDeleteV2TeamsTeamIdRequestWithBody generates requests for DeleteV2TeamsTeamId with any type of body
func NewDeleteV2TeamsTeamIdRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2TeamsTeamIdRequest calls the generic GetV2TeamsTeamId builder with application/json body
func NewGetV2TeamsTeamIdRequest(server string, teamId string, body GetV2TeamsTeamIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetV2TeamsTeamIdRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewGetV2TeamsTeamIdRequestWithBody generates requests for GetV2TeamsTeamId with any type of body
func NewGetV2TeamsTeamIdRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2TeamsTeamIdRequest calls the generic PostV2TeamsTeamId builder with application/json body
func NewPostV2TeamsTeamIdRequest(server string, teamId string, body PostV2TeamsTeamIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2TeamsTeamIdRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostV2TeamsTeamIdRequestWithBody generates requests for PostV2TeamsTeamId with any type of body
func NewPostV2TeamsTeamIdRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2UsersRequest generates requests for GetV2Users
func NewGetV2UsersRequest(server string, params *GetV2UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Discover != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "discover", runtime.ParamLocationQuery, *params.Discover); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2UsersUserIdRequest generates requests for GetV2UsersUserId
func NewGetV2UsersUserIdRequest(server string, userId string, params *GetV2UsersUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Discover != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "discover", runtime.ParamLocationQuery, *params.Discover); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2UsersUserIdRequest calls the generic PostV2UsersUserId builder with application/json body
func NewPostV2UsersUserIdRequest(server string, userId string, body PostV2UsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2UsersUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostV2UsersUserIdRequestWithBody generates requests for PostV2UsersUserId with any type of body
func NewPostV2UsersUserIdRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2UsersUserIdApiKeysRequest calls the generic PostV2UsersUserIdApiKeys builder with application/json body
func NewPostV2UsersUserIdApiKeysRequest(server string, userId string, body PostV2UsersUserIdApiKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2UsersUserIdApiKeysRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostV2UsersUserIdApiKeysRequestWithBody generates requests for PostV2UsersUserIdApiKeys with any type of body
func NewPostV2UsersUserIdApiKeysRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users/%s/apiKeys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2VmsRequest generates requests for GetV2Vms
func NewGetV2VmsRequest(server string, params *GetV2VmsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2VmsRequest calls the generic PostV2Vms builder with application/json body
func NewPostV2VmsRequest(server string, body PostV2VmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2VmsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2VmsRequestWithBody generates requests for PostV2Vms with any type of body
func NewPostV2VmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2VmsVmIdRequest calls the generic DeleteV2VmsVmId builder with application/json body
func NewDeleteV2VmsVmIdRequest(server string, vmId string, body DeleteV2VmsVmIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV2VmsVmIdRequestWithBody(server, vmId, "application/json", bodyReader)
}

// NewDeleteV2VmsVmIdRequestWithBody generates requests for DeleteV2VmsVmId with any type of body
func NewDeleteV2VmsVmIdRequestWithBody(server string, vmId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vmId", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2VmsVmIdRequest generates requests for GetV2VmsVmId
func NewGetV2VmsVmIdRequest(server string, vmId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vmId", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2VmsVmIdRequest calls the generic PostV2VmsVmId builder with application/json body
func NewPostV2VmsVmIdRequest(server string, vmId string, body PostV2VmsVmIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2VmsVmIdRequestWithBody(server, vmId, "application/json", bodyReader)
}

// NewPostV2VmsVmIdRequestWithBody generates requests for PostV2VmsVmId with any type of body
func NewPostV2VmsVmIdRequestWithBody(server string, vmId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vmId", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2VmsVmIdSnapshotSnapshotIdRequest calls the generic DeleteV2VmsVmIdSnapshotSnapshotId builder with application/json body
func NewDeleteV2VmsVmIdSnapshotSnapshotIdRequest(server string, vmId string, snapshotId string, body DeleteV2VmsVmIdSnapshotSnapshotIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV2VmsVmIdSnapshotSnapshotIdRequestWithBody(server, vmId, snapshotId, "application/json", bodyReader)
}

// NewDeleteV2VmsVmIdSnapshotSnapshotIdRequestWithBody generates requests for DeleteV2VmsVmIdSnapshotSnapshotId with any type of body
func NewDeleteV2VmsVmIdSnapshotSnapshotIdRequestWithBody(server string, vmId string, snapshotId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vmId", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vms/%s/snapshot/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2VmsVmIdSnapshotSnapshotIdRequest calls the generic PostV2VmsVmIdSnapshotSnapshotId builder with application/json body
func NewPostV2VmsVmIdSnapshotSnapshotIdRequest(server string, vmId string, snapshotId string, body PostV2VmsVmIdSnapshotSnapshotIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2VmsVmIdSnapshotSnapshotIdRequestWithBody(server, vmId, snapshotId, "application/json", bodyReader)
}

// NewPostV2VmsVmIdSnapshotSnapshotIdRequestWithBody generates requests for PostV2VmsVmIdSnapshotSnapshotId with any type of body
func NewPostV2VmsVmIdSnapshotSnapshotIdRequestWithBody(server string, vmId string, snapshotId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vmId", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vms/%s/snapshot/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2WorkerStatusRequest generates requests for GetV2WorkerStatus
func NewGetV2WorkerStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workerStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ZonesRequest generates requests for GetV2Zones
func NewGetV2ZonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV2DeploymentsWithResponse request
	GetV2DeploymentsWithResponse(ctx context.Context, params *GetV2DeploymentsParams, reqEditors ...RequestEditorFn) (*GetV2DeploymentsResponse, error)

	// PostV2DeploymentsWithBodyWithResponse request with any body
	PostV2DeploymentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DeploymentsResponse, error)

	PostV2DeploymentsWithResponse(ctx context.Context, body PostV2DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DeploymentsResponse, error)

	// DeleteV2DeploymentsDeploymentIdWithBodyWithResponse request with any body
	DeleteV2DeploymentsDeploymentIdWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2DeploymentsDeploymentIdResponse, error)

	DeleteV2DeploymentsDeploymentIdWithResponse(ctx context.Context, deploymentId string, body DeleteV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2DeploymentsDeploymentIdResponse, error)

	// GetV2DeploymentsDeploymentIdWithResponse request
	GetV2DeploymentsDeploymentIdWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetV2DeploymentsDeploymentIdResponse, error)

	// PostV2DeploymentsDeploymentIdWithBodyWithResponse request with any body
	PostV2DeploymentsDeploymentIdWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdResponse, error)

	PostV2DeploymentsDeploymentIdWithResponse(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdResponse, error)

	// GetV2DeploymentsDeploymentIdCiConfigWithResponse request
	GetV2DeploymentsDeploymentIdCiConfigWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetV2DeploymentsDeploymentIdCiConfigResponse, error)

	// PostV2DeploymentsDeploymentIdCommandWithBodyWithResponse request with any body
	PostV2DeploymentsDeploymentIdCommandWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdCommandResponse, error)

	PostV2DeploymentsDeploymentIdCommandWithResponse(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdCommandResponse, error)

	// GetV2DeploymentsDeploymentIdLogsWithResponse request
	GetV2DeploymentsDeploymentIdLogsWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetV2DeploymentsDeploymentIdLogsResponse, error)

	// GetV2DiscoverWithResponse request
	GetV2DiscoverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2DiscoverResponse, error)

	// GetV2GpuGroupsWithResponse request
	GetV2GpuGroupsWithResponse(ctx context.Context, params *GetV2GpuGroupsParams, reqEditors ...RequestEditorFn) (*GetV2GpuGroupsResponse, error)

	// GetV2GpuGroupsGpuGroupIdWithResponse request
	GetV2GpuGroupsGpuGroupIdWithResponse(ctx context.Context, gpuGroupId string, reqEditors ...RequestEditorFn) (*GetV2GpuGroupsGpuGroupIdResponse, error)

	// GetV2GpuLeasesWithResponse request
	GetV2GpuLeasesWithResponse(ctx context.Context, params *GetV2GpuLeasesParams, reqEditors ...RequestEditorFn) (*GetV2GpuLeasesResponse, error)

	// PostV2GpuLeasesWithBodyWithResponse request with any body
	PostV2GpuLeasesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesResponse, error)

	PostV2GpuLeasesWithResponse(ctx context.Context, body PostV2GpuLeasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesResponse, error)

	// DeleteV2GpuLeasesGpuLeaseIdWithBodyWithResponse request with any body
	DeleteV2GpuLeasesGpuLeaseIdWithBodyWithResponse(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2GpuLeasesGpuLeaseIdResponse, error)

	DeleteV2GpuLeasesGpuLeaseIdWithResponse(ctx context.Context, gpuLeaseId string, body DeleteV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2GpuLeasesGpuLeaseIdResponse, error)

	// GetV2GpuLeasesGpuLeaseIdWithResponse request
	GetV2GpuLeasesGpuLeaseIdWithResponse(ctx context.Context, gpuLeaseId string, reqEditors ...RequestEditorFn) (*GetV2GpuLeasesGpuLeaseIdResponse, error)

	// PostV2GpuLeasesGpuLeaseIdWithBodyWithResponse request with any body
	PostV2GpuLeasesGpuLeaseIdWithBodyWithResponse(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesGpuLeaseIdResponse, error)

	PostV2GpuLeasesGpuLeaseIdWithResponse(ctx context.Context, gpuLeaseId string, body PostV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesGpuLeaseIdResponse, error)

	// PostV2HooksHarborWithBodyWithResponse request with any body
	PostV2HooksHarborWithBodyWithResponse(ctx context.Context, params *PostV2HooksHarborParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2HooksHarborResponse, error)

	PostV2HooksHarborWithResponse(ctx context.Context, params *PostV2HooksHarborParams, body PostV2HooksHarborJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2HooksHarborResponse, error)

	// GetV2HostsWithResponse request
	GetV2HostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2HostsResponse, error)

	// GetV2HostsVerboseWithResponse request
	GetV2HostsVerboseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2HostsVerboseResponse, error)

	// GetV2JobsWithBodyWithResponse request with any body
	GetV2JobsWithBodyWithResponse(ctx context.Context, params *GetV2JobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2JobsResponse, error)

	GetV2JobsWithResponse(ctx context.Context, params *GetV2JobsParams, body GetV2JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2JobsResponse, error)

	// GetV2JobsJobIdWithBodyWithResponse request with any body
	GetV2JobsJobIdWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2JobsJobIdResponse, error)

	GetV2JobsJobIdWithResponse(ctx context.Context, jobId string, body GetV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2JobsJobIdResponse, error)

	// PostV2JobsJobIdWithBodyWithResponse request with any body
	PostV2JobsJobIdWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2JobsJobIdResponse, error)

	PostV2JobsJobIdWithResponse(ctx context.Context, jobId string, body PostV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2JobsJobIdResponse, error)

	// GetV2MetricsWithResponse request
	GetV2MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MetricsResponse, error)

	// GetV2NotificationsWithBodyWithResponse request with any body
	GetV2NotificationsWithBodyWithResponse(ctx context.Context, params *GetV2NotificationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2NotificationsResponse, error)

	GetV2NotificationsWithResponse(ctx context.Context, params *GetV2NotificationsParams, body GetV2NotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2NotificationsResponse, error)

	// DeleteV2NotificationsNotificationIdWithBodyWithResponse request with any body
	DeleteV2NotificationsNotificationIdWithBodyWithResponse(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2NotificationsNotificationIdResponse, error)

	DeleteV2NotificationsNotificationIdWithResponse(ctx context.Context, notificationId string, body DeleteV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2NotificationsNotificationIdResponse, error)

	// GetV2NotificationsNotificationIdWithBodyWithResponse request with any body
	GetV2NotificationsNotificationIdWithBodyWithResponse(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2NotificationsNotificationIdResponse, error)

	GetV2NotificationsNotificationIdWithResponse(ctx context.Context, notificationId string, body GetV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2NotificationsNotificationIdResponse, error)

	// PostV2NotificationsNotificationIdWithBodyWithResponse request with any body
	PostV2NotificationsNotificationIdWithBodyWithResponse(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2NotificationsNotificationIdResponse, error)

	PostV2NotificationsNotificationIdWithResponse(ctx context.Context, notificationId string, body PostV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2NotificationsNotificationIdResponse, error)

	// GetV2RegisterWithResponse request
	GetV2RegisterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2RegisterResponse, error)

	// GetV2ResourceMigrationsWithResponse request
	GetV2ResourceMigrationsWithResponse(ctx context.Context, params *GetV2ResourceMigrationsParams, reqEditors ...RequestEditorFn) (*GetV2ResourceMigrationsResponse, error)

	// PostV2ResourceMigrationsWithBodyWithResponse request with any body
	PostV2ResourceMigrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResponse, error)

	PostV2ResourceMigrationsWithResponse(ctx context.Context, body PostV2ResourceMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResponse, error)

	// DeleteV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse request with any body
	DeleteV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2ResourceMigrationsResourceMigrationIdResponse, error)

	DeleteV2ResourceMigrationsResourceMigrationIdWithResponse(ctx context.Context, resourceMigrationId string, body DeleteV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2ResourceMigrationsResourceMigrationIdResponse, error)

	// GetV2ResourceMigrationsResourceMigrationIdWithResponse request
	GetV2ResourceMigrationsResourceMigrationIdWithResponse(ctx context.Context, resourceMigrationId string, reqEditors ...RequestEditorFn) (*GetV2ResourceMigrationsResourceMigrationIdResponse, error)

	// PostV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse request with any body
	PostV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResourceMigrationIdResponse, error)

	PostV2ResourceMigrationsResourceMigrationIdWithResponse(ctx context.Context, resourceMigrationId string, body PostV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResourceMigrationIdResponse, error)

	// GetV2StorageManagersWithResponse request
	GetV2StorageManagersWithResponse(ctx context.Context, params *GetV2StorageManagersParams, reqEditors ...RequestEditorFn) (*GetV2StorageManagersResponse, error)

	// DeleteV2StorageManagersStorageManagerIdWithResponse request
	DeleteV2StorageManagersStorageManagerIdWithResponse(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*DeleteV2StorageManagersStorageManagerIdResponse, error)

	// GetV2StorageManagersStorageManagerIdWithResponse request
	GetV2StorageManagersStorageManagerIdWithResponse(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*GetV2StorageManagersStorageManagerIdResponse, error)

	// GetV2SystemCapacitiesWithResponse request
	GetV2SystemCapacitiesWithResponse(ctx context.Context, params *GetV2SystemCapacitiesParams, reqEditors ...RequestEditorFn) (*GetV2SystemCapacitiesResponse, error)

	// GetV2SystemStatsWithResponse request
	GetV2SystemStatsWithResponse(ctx context.Context, params *GetV2SystemStatsParams, reqEditors ...RequestEditorFn) (*GetV2SystemStatsResponse, error)

	// GetV2SystemStatusWithResponse request
	GetV2SystemStatusWithResponse(ctx context.Context, params *GetV2SystemStatusParams, reqEditors ...RequestEditorFn) (*GetV2SystemStatusResponse, error)

	// GetV2TeamsWithBodyWithResponse request with any body
	GetV2TeamsWithBodyWithResponse(ctx context.Context, params *GetV2TeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2TeamsResponse, error)

	GetV2TeamsWithResponse(ctx context.Context, params *GetV2TeamsParams, body GetV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2TeamsResponse, error)

	// PostV2TeamsWithBodyWithResponse request with any body
	PostV2TeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2TeamsResponse, error)

	PostV2TeamsWithResponse(ctx context.Context, body PostV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2TeamsResponse, error)

	// DeleteV2TeamsTeamIdWithBodyWithResponse request with any body
	DeleteV2TeamsTeamIdWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2TeamsTeamIdResponse, error)

	DeleteV2TeamsTeamIdWithResponse(ctx context.Context, teamId string, body DeleteV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2TeamsTeamIdResponse, error)

	// GetV2TeamsTeamIdWithBodyWithResponse request with any body
	GetV2TeamsTeamIdWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2TeamsTeamIdResponse, error)

	GetV2TeamsTeamIdWithResponse(ctx context.Context, teamId string, body GetV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2TeamsTeamIdResponse, error)

	// PostV2TeamsTeamIdWithBodyWithResponse request with any body
	PostV2TeamsTeamIdWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2TeamsTeamIdResponse, error)

	PostV2TeamsTeamIdWithResponse(ctx context.Context, teamId string, body PostV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2TeamsTeamIdResponse, error)

	// GetV2UsersWithResponse request
	GetV2UsersWithResponse(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*GetV2UsersResponse, error)

	// GetV2UsersUserIdWithResponse request
	GetV2UsersUserIdWithResponse(ctx context.Context, userId string, params *GetV2UsersUserIdParams, reqEditors ...RequestEditorFn) (*GetV2UsersUserIdResponse, error)

	// PostV2UsersUserIdWithBodyWithResponse request with any body
	PostV2UsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdResponse, error)

	PostV2UsersUserIdWithResponse(ctx context.Context, userId string, body PostV2UsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdResponse, error)

	// PostV2UsersUserIdApiKeysWithBodyWithResponse request with any body
	PostV2UsersUserIdApiKeysWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdApiKeysResponse, error)

	PostV2UsersUserIdApiKeysWithResponse(ctx context.Context, userId string, body PostV2UsersUserIdApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdApiKeysResponse, error)

	// GetV2VmsWithResponse request
	GetV2VmsWithResponse(ctx context.Context, params *GetV2VmsParams, reqEditors ...RequestEditorFn) (*GetV2VmsResponse, error)

	// PostV2VmsWithBodyWithResponse request with any body
	PostV2VmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2VmsResponse, error)

	PostV2VmsWithResponse(ctx context.Context, body PostV2VmsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2VmsResponse, error)

	// DeleteV2VmsVmIdWithBodyWithResponse request with any body
	DeleteV2VmsVmIdWithBodyWithResponse(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdResponse, error)

	DeleteV2VmsVmIdWithResponse(ctx context.Context, vmId string, body DeleteV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdResponse, error)

	// GetV2VmsVmIdWithResponse request
	GetV2VmsVmIdWithResponse(ctx context.Context, vmId string, reqEditors ...RequestEditorFn) (*GetV2VmsVmIdResponse, error)

	// PostV2VmsVmIdWithBodyWithResponse request with any body
	PostV2VmsVmIdWithBodyWithResponse(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdResponse, error)

	PostV2VmsVmIdWithResponse(ctx context.Context, vmId string, body PostV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdResponse, error)

	// DeleteV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse request with any body
	DeleteV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdSnapshotSnapshotIdResponse, error)

	DeleteV2VmsVmIdSnapshotSnapshotIdWithResponse(ctx context.Context, vmId string, snapshotId string, body DeleteV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdSnapshotSnapshotIdResponse, error)

	// PostV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse request with any body
	PostV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdSnapshotSnapshotIdResponse, error)

	PostV2VmsVmIdSnapshotSnapshotIdWithResponse(ctx context.Context, vmId string, snapshotId string, body PostV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdSnapshotSnapshotIdResponse, error)

	// GetV2WorkerStatusWithResponse request
	GetV2WorkerStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2WorkerStatusResponse, error)

	// GetV2ZonesWithResponse request
	GetV2ZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ZonesResponse, error)
}

type GetV2DeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyDeploymentRead
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2DeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyDeploymentRead
	JSON400      *SysErrorResponse
	JSON403      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2DeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2DeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2DeploymentsDeploymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyDeploymentCreated
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON403      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2DeploymentsDeploymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2DeploymentsDeploymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DeploymentsDeploymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyDeploymentRead
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DeploymentsDeploymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DeploymentsDeploymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2DeploymentsDeploymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyDeploymentUpdated
	JSON400      *SysErrorResponse
	JSON403      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2DeploymentsDeploymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2DeploymentsDeploymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DeploymentsDeploymentIdCiConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyCiConfig
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DeploymentsDeploymentIdCiConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DeploymentsDeploymentIdCiConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2DeploymentsDeploymentIdCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON423      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2DeploymentsDeploymentIdCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2DeploymentsDeploymentIdCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DeploymentsDeploymentIdLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DeploymentsDeploymentIdLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DeploymentsDeploymentIdLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DiscoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyDiscoverRead
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DiscoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DiscoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2GpuGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyGpuGroupRead
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON423      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2GpuGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2GpuGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2GpuGroupsGpuGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyGpuGroupRead
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON423      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2GpuGroupsGpuGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2GpuGroupsGpuGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2GpuLeasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyGpuLeaseRead
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON423      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2GpuLeasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2GpuLeasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2GpuLeasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyGpuLeaseCreated
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2GpuLeasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2GpuLeasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2GpuLeasesGpuLeaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyGpuLeaseDeleted
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2GpuLeasesGpuLeaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2GpuLeasesGpuLeaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2GpuLeasesGpuLeaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyGpuLeaseRead
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON423      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2GpuLeasesGpuLeaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2GpuLeasesGpuLeaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2GpuLeasesGpuLeaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyGpuLeaseUpdated
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2GpuLeasesGpuLeaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2GpuLeasesGpuLeaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2HooksHarborResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2HooksHarborResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2HooksHarborResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2HostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyHostRead
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2HostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2HostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2HostsVerboseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyHostVerboseRead
	JSON403      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2HostsVerboseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2HostsVerboseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2JobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyJobRead
}

// Status returns HTTPResponse.Status
func (r GetV2JobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2JobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2JobsJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyJobRead
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2JobsJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2JobsJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2JobsJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyJobRead
}

// Status returns HTTPResponse.Status
func (r PostV2JobsJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2JobsJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2MetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2NotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyNotificationRead
	JSON400      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2NotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2NotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2NotificationsNotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2NotificationsNotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2NotificationsNotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2NotificationsNotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyNotificationRead
	JSON400      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2NotificationsNotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2NotificationsNotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2NotificationsNotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2NotificationsNotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2NotificationsNotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ResourceMigrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyResourceMigrationRead
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2ResourceMigrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ResourceMigrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ResourceMigrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyResourceMigrationCreated
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2ResourceMigrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ResourceMigrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2ResourceMigrationsResourceMigrationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2ResourceMigrationsResourceMigrationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2ResourceMigrationsResourceMigrationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ResourceMigrationsResourceMigrationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyResourceMigrationRead
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2ResourceMigrationsResourceMigrationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ResourceMigrationsResourceMigrationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ResourceMigrationsResourceMigrationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyResourceMigrationUpdated
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2ResourceMigrationsResourceMigrationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ResourceMigrationsResourceMigrationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StorageManagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodySmRead
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2StorageManagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StorageManagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2StorageManagersStorageManagerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodySmDeleted
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2StorageManagersStorageManagerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2StorageManagersStorageManagerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StorageManagersStorageManagerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodySmDeleted
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2StorageManagersStorageManagerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StorageManagersStorageManagerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemCapacitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyTimestampedSystemCapacities
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2SystemCapacitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemCapacitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyTimestampedSystemStats
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2SystemStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyTimestampedSystemStatus
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2SystemStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2TeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyTeamRead
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2TeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2TeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2TeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyTeamRead
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2TeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2TeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2TeamsTeamIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2TeamsTeamIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2TeamsTeamIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2TeamsTeamIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyTeamRead
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2TeamsTeamIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2TeamsTeamIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2TeamsTeamIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyTeamRead
	JSON400      *BodyBindingError
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2TeamsTeamIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2TeamsTeamIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyUserRead
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2UsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyUserRead
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2UsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2UsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2UsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyUserRead
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2UsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2UsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2UsersUserIdApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyApiKeyCreated
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2UsersUserIdApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2UsersUserIdApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2VmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyVmRead
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2VmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2VmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2VmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyVmCreated
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON403      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2VmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2VmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2VmsVmIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyVmDeleted
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2VmsVmIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2VmsVmIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2VmsVmIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyVmRead
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2VmsVmIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2VmsVmIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2VmsVmIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyVmUpdated
	JSON400      *SysErrorResponse
	JSON401      *SysErrorResponse
	JSON403      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2VmsVmIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2VmsVmIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2VmsVmIdSnapshotSnapshotIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyVmSnapshotDeleted
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteV2VmsVmIdSnapshotSnapshotIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2VmsVmIdSnapshotSnapshotIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2VmsVmIdSnapshotSnapshotIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BodyVmSnapshotRead
	JSON400      *SysErrorResponse
	JSON404      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV2VmsVmIdSnapshotSnapshotIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2VmsVmIdSnapshotSnapshotIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2WorkerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyWorkerStatusRead
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2WorkerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2WorkerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BodyZoneRead
	JSON400      *SysErrorResponse
	JSON500      *SysErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV2ZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV2DeploymentsWithResponse request returning *GetV2DeploymentsResponse
func (c *ClientWithResponses) GetV2DeploymentsWithResponse(ctx context.Context, params *GetV2DeploymentsParams, reqEditors ...RequestEditorFn) (*GetV2DeploymentsResponse, error) {
	rsp, err := c.GetV2Deployments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DeploymentsResponse(rsp)
}

// PostV2DeploymentsWithBodyWithResponse request with arbitrary body returning *PostV2DeploymentsResponse
func (c *ClientWithResponses) PostV2DeploymentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DeploymentsResponse, error) {
	rsp, err := c.PostV2DeploymentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DeploymentsResponse(rsp)
}

func (c *ClientWithResponses) PostV2DeploymentsWithResponse(ctx context.Context, body PostV2DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DeploymentsResponse, error) {
	rsp, err := c.PostV2Deployments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DeploymentsResponse(rsp)
}

// DeleteV2DeploymentsDeploymentIdWithBodyWithResponse request with arbitrary body returning *DeleteV2DeploymentsDeploymentIdResponse
func (c *ClientWithResponses) DeleteV2DeploymentsDeploymentIdWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2DeploymentsDeploymentIdResponse, error) {
	rsp, err := c.DeleteV2DeploymentsDeploymentIdWithBody(ctx, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2DeploymentsDeploymentIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteV2DeploymentsDeploymentIdWithResponse(ctx context.Context, deploymentId string, body DeleteV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2DeploymentsDeploymentIdResponse, error) {
	rsp, err := c.DeleteV2DeploymentsDeploymentId(ctx, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2DeploymentsDeploymentIdResponse(rsp)
}

// GetV2DeploymentsDeploymentIdWithResponse request returning *GetV2DeploymentsDeploymentIdResponse
func (c *ClientWithResponses) GetV2DeploymentsDeploymentIdWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetV2DeploymentsDeploymentIdResponse, error) {
	rsp, err := c.GetV2DeploymentsDeploymentId(ctx, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DeploymentsDeploymentIdResponse(rsp)
}

// PostV2DeploymentsDeploymentIdWithBodyWithResponse request with arbitrary body returning *PostV2DeploymentsDeploymentIdResponse
func (c *ClientWithResponses) PostV2DeploymentsDeploymentIdWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdResponse, error) {
	rsp, err := c.PostV2DeploymentsDeploymentIdWithBody(ctx, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DeploymentsDeploymentIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2DeploymentsDeploymentIdWithResponse(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdResponse, error) {
	rsp, err := c.PostV2DeploymentsDeploymentId(ctx, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DeploymentsDeploymentIdResponse(rsp)
}

// GetV2DeploymentsDeploymentIdCiConfigWithResponse request returning *GetV2DeploymentsDeploymentIdCiConfigResponse
func (c *ClientWithResponses) GetV2DeploymentsDeploymentIdCiConfigWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetV2DeploymentsDeploymentIdCiConfigResponse, error) {
	rsp, err := c.GetV2DeploymentsDeploymentIdCiConfig(ctx, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DeploymentsDeploymentIdCiConfigResponse(rsp)
}

// PostV2DeploymentsDeploymentIdCommandWithBodyWithResponse request with arbitrary body returning *PostV2DeploymentsDeploymentIdCommandResponse
func (c *ClientWithResponses) PostV2DeploymentsDeploymentIdCommandWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdCommandResponse, error) {
	rsp, err := c.PostV2DeploymentsDeploymentIdCommandWithBody(ctx, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DeploymentsDeploymentIdCommandResponse(rsp)
}

func (c *ClientWithResponses) PostV2DeploymentsDeploymentIdCommandWithResponse(ctx context.Context, deploymentId string, body PostV2DeploymentsDeploymentIdCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DeploymentsDeploymentIdCommandResponse, error) {
	rsp, err := c.PostV2DeploymentsDeploymentIdCommand(ctx, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DeploymentsDeploymentIdCommandResponse(rsp)
}

// GetV2DeploymentsDeploymentIdLogsWithResponse request returning *GetV2DeploymentsDeploymentIdLogsResponse
func (c *ClientWithResponses) GetV2DeploymentsDeploymentIdLogsWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetV2DeploymentsDeploymentIdLogsResponse, error) {
	rsp, err := c.GetV2DeploymentsDeploymentIdLogs(ctx, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DeploymentsDeploymentIdLogsResponse(rsp)
}

// GetV2DiscoverWithResponse request returning *GetV2DiscoverResponse
func (c *ClientWithResponses) GetV2DiscoverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2DiscoverResponse, error) {
	rsp, err := c.GetV2Discover(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DiscoverResponse(rsp)
}

// GetV2GpuGroupsWithResponse request returning *GetV2GpuGroupsResponse
func (c *ClientWithResponses) GetV2GpuGroupsWithResponse(ctx context.Context, params *GetV2GpuGroupsParams, reqEditors ...RequestEditorFn) (*GetV2GpuGroupsResponse, error) {
	rsp, err := c.GetV2GpuGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2GpuGroupsResponse(rsp)
}

// GetV2GpuGroupsGpuGroupIdWithResponse request returning *GetV2GpuGroupsGpuGroupIdResponse
func (c *ClientWithResponses) GetV2GpuGroupsGpuGroupIdWithResponse(ctx context.Context, gpuGroupId string, reqEditors ...RequestEditorFn) (*GetV2GpuGroupsGpuGroupIdResponse, error) {
	rsp, err := c.GetV2GpuGroupsGpuGroupId(ctx, gpuGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2GpuGroupsGpuGroupIdResponse(rsp)
}

// GetV2GpuLeasesWithResponse request returning *GetV2GpuLeasesResponse
func (c *ClientWithResponses) GetV2GpuLeasesWithResponse(ctx context.Context, params *GetV2GpuLeasesParams, reqEditors ...RequestEditorFn) (*GetV2GpuLeasesResponse, error) {
	rsp, err := c.GetV2GpuLeases(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2GpuLeasesResponse(rsp)
}

// PostV2GpuLeasesWithBodyWithResponse request with arbitrary body returning *PostV2GpuLeasesResponse
func (c *ClientWithResponses) PostV2GpuLeasesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesResponse, error) {
	rsp, err := c.PostV2GpuLeasesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2GpuLeasesResponse(rsp)
}

func (c *ClientWithResponses) PostV2GpuLeasesWithResponse(ctx context.Context, body PostV2GpuLeasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesResponse, error) {
	rsp, err := c.PostV2GpuLeases(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2GpuLeasesResponse(rsp)
}

// DeleteV2GpuLeasesGpuLeaseIdWithBodyWithResponse request with arbitrary body returning *DeleteV2GpuLeasesGpuLeaseIdResponse
func (c *ClientWithResponses) DeleteV2GpuLeasesGpuLeaseIdWithBodyWithResponse(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2GpuLeasesGpuLeaseIdResponse, error) {
	rsp, err := c.DeleteV2GpuLeasesGpuLeaseIdWithBody(ctx, gpuLeaseId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2GpuLeasesGpuLeaseIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteV2GpuLeasesGpuLeaseIdWithResponse(ctx context.Context, gpuLeaseId string, body DeleteV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2GpuLeasesGpuLeaseIdResponse, error) {
	rsp, err := c.DeleteV2GpuLeasesGpuLeaseId(ctx, gpuLeaseId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2GpuLeasesGpuLeaseIdResponse(rsp)
}

// GetV2GpuLeasesGpuLeaseIdWithResponse request returning *GetV2GpuLeasesGpuLeaseIdResponse
func (c *ClientWithResponses) GetV2GpuLeasesGpuLeaseIdWithResponse(ctx context.Context, gpuLeaseId string, reqEditors ...RequestEditorFn) (*GetV2GpuLeasesGpuLeaseIdResponse, error) {
	rsp, err := c.GetV2GpuLeasesGpuLeaseId(ctx, gpuLeaseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2GpuLeasesGpuLeaseIdResponse(rsp)
}

// PostV2GpuLeasesGpuLeaseIdWithBodyWithResponse request with arbitrary body returning *PostV2GpuLeasesGpuLeaseIdResponse
func (c *ClientWithResponses) PostV2GpuLeasesGpuLeaseIdWithBodyWithResponse(ctx context.Context, gpuLeaseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesGpuLeaseIdResponse, error) {
	rsp, err := c.PostV2GpuLeasesGpuLeaseIdWithBody(ctx, gpuLeaseId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2GpuLeasesGpuLeaseIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2GpuLeasesGpuLeaseIdWithResponse(ctx context.Context, gpuLeaseId string, body PostV2GpuLeasesGpuLeaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2GpuLeasesGpuLeaseIdResponse, error) {
	rsp, err := c.PostV2GpuLeasesGpuLeaseId(ctx, gpuLeaseId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2GpuLeasesGpuLeaseIdResponse(rsp)
}

// PostV2HooksHarborWithBodyWithResponse request with arbitrary body returning *PostV2HooksHarborResponse
func (c *ClientWithResponses) PostV2HooksHarborWithBodyWithResponse(ctx context.Context, params *PostV2HooksHarborParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2HooksHarborResponse, error) {
	rsp, err := c.PostV2HooksHarborWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2HooksHarborResponse(rsp)
}

func (c *ClientWithResponses) PostV2HooksHarborWithResponse(ctx context.Context, params *PostV2HooksHarborParams, body PostV2HooksHarborJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2HooksHarborResponse, error) {
	rsp, err := c.PostV2HooksHarbor(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2HooksHarborResponse(rsp)
}

// GetV2HostsWithResponse request returning *GetV2HostsResponse
func (c *ClientWithResponses) GetV2HostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2HostsResponse, error) {
	rsp, err := c.GetV2Hosts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2HostsResponse(rsp)
}

// GetV2HostsVerboseWithResponse request returning *GetV2HostsVerboseResponse
func (c *ClientWithResponses) GetV2HostsVerboseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2HostsVerboseResponse, error) {
	rsp, err := c.GetV2HostsVerbose(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2HostsVerboseResponse(rsp)
}

// GetV2JobsWithBodyWithResponse request with arbitrary body returning *GetV2JobsResponse
func (c *ClientWithResponses) GetV2JobsWithBodyWithResponse(ctx context.Context, params *GetV2JobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2JobsResponse, error) {
	rsp, err := c.GetV2JobsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JobsResponse(rsp)
}

func (c *ClientWithResponses) GetV2JobsWithResponse(ctx context.Context, params *GetV2JobsParams, body GetV2JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2JobsResponse, error) {
	rsp, err := c.GetV2Jobs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JobsResponse(rsp)
}

// GetV2JobsJobIdWithBodyWithResponse request with arbitrary body returning *GetV2JobsJobIdResponse
func (c *ClientWithResponses) GetV2JobsJobIdWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2JobsJobIdResponse, error) {
	rsp, err := c.GetV2JobsJobIdWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JobsJobIdResponse(rsp)
}

func (c *ClientWithResponses) GetV2JobsJobIdWithResponse(ctx context.Context, jobId string, body GetV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2JobsJobIdResponse, error) {
	rsp, err := c.GetV2JobsJobId(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JobsJobIdResponse(rsp)
}

// PostV2JobsJobIdWithBodyWithResponse request with arbitrary body returning *PostV2JobsJobIdResponse
func (c *ClientWithResponses) PostV2JobsJobIdWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2JobsJobIdResponse, error) {
	rsp, err := c.PostV2JobsJobIdWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2JobsJobIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2JobsJobIdWithResponse(ctx context.Context, jobId string, body PostV2JobsJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2JobsJobIdResponse, error) {
	rsp, err := c.PostV2JobsJobId(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2JobsJobIdResponse(rsp)
}

// GetV2MetricsWithResponse request returning *GetV2MetricsResponse
func (c *ClientWithResponses) GetV2MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MetricsResponse, error) {
	rsp, err := c.GetV2Metrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MetricsResponse(rsp)
}

// GetV2NotificationsWithBodyWithResponse request with arbitrary body returning *GetV2NotificationsResponse
func (c *ClientWithResponses) GetV2NotificationsWithBodyWithResponse(ctx context.Context, params *GetV2NotificationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2NotificationsResponse, error) {
	rsp, err := c.GetV2NotificationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2NotificationsResponse(rsp)
}

func (c *ClientWithResponses) GetV2NotificationsWithResponse(ctx context.Context, params *GetV2NotificationsParams, body GetV2NotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2NotificationsResponse, error) {
	rsp, err := c.GetV2Notifications(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2NotificationsResponse(rsp)
}

// DeleteV2NotificationsNotificationIdWithBodyWithResponse request with arbitrary body returning *DeleteV2NotificationsNotificationIdResponse
func (c *ClientWithResponses) DeleteV2NotificationsNotificationIdWithBodyWithResponse(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2NotificationsNotificationIdResponse, error) {
	rsp, err := c.DeleteV2NotificationsNotificationIdWithBody(ctx, notificationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2NotificationsNotificationIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteV2NotificationsNotificationIdWithResponse(ctx context.Context, notificationId string, body DeleteV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2NotificationsNotificationIdResponse, error) {
	rsp, err := c.DeleteV2NotificationsNotificationId(ctx, notificationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2NotificationsNotificationIdResponse(rsp)
}

// GetV2NotificationsNotificationIdWithBodyWithResponse request with arbitrary body returning *GetV2NotificationsNotificationIdResponse
func (c *ClientWithResponses) GetV2NotificationsNotificationIdWithBodyWithResponse(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2NotificationsNotificationIdResponse, error) {
	rsp, err := c.GetV2NotificationsNotificationIdWithBody(ctx, notificationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2NotificationsNotificationIdResponse(rsp)
}

func (c *ClientWithResponses) GetV2NotificationsNotificationIdWithResponse(ctx context.Context, notificationId string, body GetV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2NotificationsNotificationIdResponse, error) {
	rsp, err := c.GetV2NotificationsNotificationId(ctx, notificationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2NotificationsNotificationIdResponse(rsp)
}

// PostV2NotificationsNotificationIdWithBodyWithResponse request with arbitrary body returning *PostV2NotificationsNotificationIdResponse
func (c *ClientWithResponses) PostV2NotificationsNotificationIdWithBodyWithResponse(ctx context.Context, notificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2NotificationsNotificationIdResponse, error) {
	rsp, err := c.PostV2NotificationsNotificationIdWithBody(ctx, notificationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2NotificationsNotificationIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2NotificationsNotificationIdWithResponse(ctx context.Context, notificationId string, body PostV2NotificationsNotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2NotificationsNotificationIdResponse, error) {
	rsp, err := c.PostV2NotificationsNotificationId(ctx, notificationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2NotificationsNotificationIdResponse(rsp)
}

// GetV2RegisterWithResponse request returning *GetV2RegisterResponse
func (c *ClientWithResponses) GetV2RegisterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2RegisterResponse, error) {
	rsp, err := c.GetV2Register(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2RegisterResponse(rsp)
}

// GetV2ResourceMigrationsWithResponse request returning *GetV2ResourceMigrationsResponse
func (c *ClientWithResponses) GetV2ResourceMigrationsWithResponse(ctx context.Context, params *GetV2ResourceMigrationsParams, reqEditors ...RequestEditorFn) (*GetV2ResourceMigrationsResponse, error) {
	rsp, err := c.GetV2ResourceMigrations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ResourceMigrationsResponse(rsp)
}

// PostV2ResourceMigrationsWithBodyWithResponse request with arbitrary body returning *PostV2ResourceMigrationsResponse
func (c *ClientWithResponses) PostV2ResourceMigrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResponse, error) {
	rsp, err := c.PostV2ResourceMigrationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ResourceMigrationsResponse(rsp)
}

func (c *ClientWithResponses) PostV2ResourceMigrationsWithResponse(ctx context.Context, body PostV2ResourceMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResponse, error) {
	rsp, err := c.PostV2ResourceMigrations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ResourceMigrationsResponse(rsp)
}

// DeleteV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse request with arbitrary body returning *DeleteV2ResourceMigrationsResourceMigrationIdResponse
func (c *ClientWithResponses) DeleteV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2ResourceMigrationsResourceMigrationIdResponse, error) {
	rsp, err := c.DeleteV2ResourceMigrationsResourceMigrationIdWithBody(ctx, resourceMigrationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2ResourceMigrationsResourceMigrationIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteV2ResourceMigrationsResourceMigrationIdWithResponse(ctx context.Context, resourceMigrationId string, body DeleteV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2ResourceMigrationsResourceMigrationIdResponse, error) {
	rsp, err := c.DeleteV2ResourceMigrationsResourceMigrationId(ctx, resourceMigrationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2ResourceMigrationsResourceMigrationIdResponse(rsp)
}

// GetV2ResourceMigrationsResourceMigrationIdWithResponse request returning *GetV2ResourceMigrationsResourceMigrationIdResponse
func (c *ClientWithResponses) GetV2ResourceMigrationsResourceMigrationIdWithResponse(ctx context.Context, resourceMigrationId string, reqEditors ...RequestEditorFn) (*GetV2ResourceMigrationsResourceMigrationIdResponse, error) {
	rsp, err := c.GetV2ResourceMigrationsResourceMigrationId(ctx, resourceMigrationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ResourceMigrationsResourceMigrationIdResponse(rsp)
}

// PostV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse request with arbitrary body returning *PostV2ResourceMigrationsResourceMigrationIdResponse
func (c *ClientWithResponses) PostV2ResourceMigrationsResourceMigrationIdWithBodyWithResponse(ctx context.Context, resourceMigrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResourceMigrationIdResponse, error) {
	rsp, err := c.PostV2ResourceMigrationsResourceMigrationIdWithBody(ctx, resourceMigrationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ResourceMigrationsResourceMigrationIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2ResourceMigrationsResourceMigrationIdWithResponse(ctx context.Context, resourceMigrationId string, body PostV2ResourceMigrationsResourceMigrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ResourceMigrationsResourceMigrationIdResponse, error) {
	rsp, err := c.PostV2ResourceMigrationsResourceMigrationId(ctx, resourceMigrationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ResourceMigrationsResourceMigrationIdResponse(rsp)
}

// GetV2StorageManagersWithResponse request returning *GetV2StorageManagersResponse
func (c *ClientWithResponses) GetV2StorageManagersWithResponse(ctx context.Context, params *GetV2StorageManagersParams, reqEditors ...RequestEditorFn) (*GetV2StorageManagersResponse, error) {
	rsp, err := c.GetV2StorageManagers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StorageManagersResponse(rsp)
}

// DeleteV2StorageManagersStorageManagerIdWithResponse request returning *DeleteV2StorageManagersStorageManagerIdResponse
func (c *ClientWithResponses) DeleteV2StorageManagersStorageManagerIdWithResponse(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*DeleteV2StorageManagersStorageManagerIdResponse, error) {
	rsp, err := c.DeleteV2StorageManagersStorageManagerId(ctx, storageManagerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2StorageManagersStorageManagerIdResponse(rsp)
}

// GetV2StorageManagersStorageManagerIdWithResponse request returning *GetV2StorageManagersStorageManagerIdResponse
func (c *ClientWithResponses) GetV2StorageManagersStorageManagerIdWithResponse(ctx context.Context, storageManagerId string, reqEditors ...RequestEditorFn) (*GetV2StorageManagersStorageManagerIdResponse, error) {
	rsp, err := c.GetV2StorageManagersStorageManagerId(ctx, storageManagerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StorageManagersStorageManagerIdResponse(rsp)
}

// GetV2SystemCapacitiesWithResponse request returning *GetV2SystemCapacitiesResponse
func (c *ClientWithResponses) GetV2SystemCapacitiesWithResponse(ctx context.Context, params *GetV2SystemCapacitiesParams, reqEditors ...RequestEditorFn) (*GetV2SystemCapacitiesResponse, error) {
	rsp, err := c.GetV2SystemCapacities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemCapacitiesResponse(rsp)
}

// GetV2SystemStatsWithResponse request returning *GetV2SystemStatsResponse
func (c *ClientWithResponses) GetV2SystemStatsWithResponse(ctx context.Context, params *GetV2SystemStatsParams, reqEditors ...RequestEditorFn) (*GetV2SystemStatsResponse, error) {
	rsp, err := c.GetV2SystemStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemStatsResponse(rsp)
}

// GetV2SystemStatusWithResponse request returning *GetV2SystemStatusResponse
func (c *ClientWithResponses) GetV2SystemStatusWithResponse(ctx context.Context, params *GetV2SystemStatusParams, reqEditors ...RequestEditorFn) (*GetV2SystemStatusResponse, error) {
	rsp, err := c.GetV2SystemStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemStatusResponse(rsp)
}

// GetV2TeamsWithBodyWithResponse request with arbitrary body returning *GetV2TeamsResponse
func (c *ClientWithResponses) GetV2TeamsWithBodyWithResponse(ctx context.Context, params *GetV2TeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2TeamsResponse, error) {
	rsp, err := c.GetV2TeamsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TeamsResponse(rsp)
}

func (c *ClientWithResponses) GetV2TeamsWithResponse(ctx context.Context, params *GetV2TeamsParams, body GetV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2TeamsResponse, error) {
	rsp, err := c.GetV2Teams(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TeamsResponse(rsp)
}

// PostV2TeamsWithBodyWithResponse request with arbitrary body returning *PostV2TeamsResponse
func (c *ClientWithResponses) PostV2TeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2TeamsResponse, error) {
	rsp, err := c.PostV2TeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2TeamsResponse(rsp)
}

func (c *ClientWithResponses) PostV2TeamsWithResponse(ctx context.Context, body PostV2TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2TeamsResponse, error) {
	rsp, err := c.PostV2Teams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2TeamsResponse(rsp)
}

// DeleteV2TeamsTeamIdWithBodyWithResponse request with arbitrary body returning *DeleteV2TeamsTeamIdResponse
func (c *ClientWithResponses) DeleteV2TeamsTeamIdWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2TeamsTeamIdResponse, error) {
	rsp, err := c.DeleteV2TeamsTeamIdWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2TeamsTeamIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteV2TeamsTeamIdWithResponse(ctx context.Context, teamId string, body DeleteV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2TeamsTeamIdResponse, error) {
	rsp, err := c.DeleteV2TeamsTeamId(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2TeamsTeamIdResponse(rsp)
}

// GetV2TeamsTeamIdWithBodyWithResponse request with arbitrary body returning *GetV2TeamsTeamIdResponse
func (c *ClientWithResponses) GetV2TeamsTeamIdWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetV2TeamsTeamIdResponse, error) {
	rsp, err := c.GetV2TeamsTeamIdWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TeamsTeamIdResponse(rsp)
}

func (c *ClientWithResponses) GetV2TeamsTeamIdWithResponse(ctx context.Context, teamId string, body GetV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetV2TeamsTeamIdResponse, error) {
	rsp, err := c.GetV2TeamsTeamId(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TeamsTeamIdResponse(rsp)
}

// PostV2TeamsTeamIdWithBodyWithResponse request with arbitrary body returning *PostV2TeamsTeamIdResponse
func (c *ClientWithResponses) PostV2TeamsTeamIdWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2TeamsTeamIdResponse, error) {
	rsp, err := c.PostV2TeamsTeamIdWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2TeamsTeamIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2TeamsTeamIdWithResponse(ctx context.Context, teamId string, body PostV2TeamsTeamIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2TeamsTeamIdResponse, error) {
	rsp, err := c.PostV2TeamsTeamId(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2TeamsTeamIdResponse(rsp)
}

// GetV2UsersWithResponse request returning *GetV2UsersResponse
func (c *ClientWithResponses) GetV2UsersWithResponse(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*GetV2UsersResponse, error) {
	rsp, err := c.GetV2Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2UsersResponse(rsp)
}

// GetV2UsersUserIdWithResponse request returning *GetV2UsersUserIdResponse
func (c *ClientWithResponses) GetV2UsersUserIdWithResponse(ctx context.Context, userId string, params *GetV2UsersUserIdParams, reqEditors ...RequestEditorFn) (*GetV2UsersUserIdResponse, error) {
	rsp, err := c.GetV2UsersUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2UsersUserIdResponse(rsp)
}

// PostV2UsersUserIdWithBodyWithResponse request with arbitrary body returning *PostV2UsersUserIdResponse
func (c *ClientWithResponses) PostV2UsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdResponse, error) {
	rsp, err := c.PostV2UsersUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2UsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2UsersUserIdWithResponse(ctx context.Context, userId string, body PostV2UsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdResponse, error) {
	rsp, err := c.PostV2UsersUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2UsersUserIdResponse(rsp)
}

// PostV2UsersUserIdApiKeysWithBodyWithResponse request with arbitrary body returning *PostV2UsersUserIdApiKeysResponse
func (c *ClientWithResponses) PostV2UsersUserIdApiKeysWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdApiKeysResponse, error) {
	rsp, err := c.PostV2UsersUserIdApiKeysWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2UsersUserIdApiKeysResponse(rsp)
}

func (c *ClientWithResponses) PostV2UsersUserIdApiKeysWithResponse(ctx context.Context, userId string, body PostV2UsersUserIdApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2UsersUserIdApiKeysResponse, error) {
	rsp, err := c.PostV2UsersUserIdApiKeys(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2UsersUserIdApiKeysResponse(rsp)
}

// GetV2VmsWithResponse request returning *GetV2VmsResponse
func (c *ClientWithResponses) GetV2VmsWithResponse(ctx context.Context, params *GetV2VmsParams, reqEditors ...RequestEditorFn) (*GetV2VmsResponse, error) {
	rsp, err := c.GetV2Vms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2VmsResponse(rsp)
}

// PostV2VmsWithBodyWithResponse request with arbitrary body returning *PostV2VmsResponse
func (c *ClientWithResponses) PostV2VmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2VmsResponse, error) {
	rsp, err := c.PostV2VmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2VmsResponse(rsp)
}

func (c *ClientWithResponses) PostV2VmsWithResponse(ctx context.Context, body PostV2VmsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2VmsResponse, error) {
	rsp, err := c.PostV2Vms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2VmsResponse(rsp)
}

// DeleteV2VmsVmIdWithBodyWithResponse request with arbitrary body returning *DeleteV2VmsVmIdResponse
func (c *ClientWithResponses) DeleteV2VmsVmIdWithBodyWithResponse(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdResponse, error) {
	rsp, err := c.DeleteV2VmsVmIdWithBody(ctx, vmId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2VmsVmIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteV2VmsVmIdWithResponse(ctx context.Context, vmId string, body DeleteV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdResponse, error) {
	rsp, err := c.DeleteV2VmsVmId(ctx, vmId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2VmsVmIdResponse(rsp)
}

// GetV2VmsVmIdWithResponse request returning *GetV2VmsVmIdResponse
func (c *ClientWithResponses) GetV2VmsVmIdWithResponse(ctx context.Context, vmId string, reqEditors ...RequestEditorFn) (*GetV2VmsVmIdResponse, error) {
	rsp, err := c.GetV2VmsVmId(ctx, vmId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2VmsVmIdResponse(rsp)
}

// PostV2VmsVmIdWithBodyWithResponse request with arbitrary body returning *PostV2VmsVmIdResponse
func (c *ClientWithResponses) PostV2VmsVmIdWithBodyWithResponse(ctx context.Context, vmId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdResponse, error) {
	rsp, err := c.PostV2VmsVmIdWithBody(ctx, vmId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2VmsVmIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2VmsVmIdWithResponse(ctx context.Context, vmId string, body PostV2VmsVmIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdResponse, error) {
	rsp, err := c.PostV2VmsVmId(ctx, vmId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2VmsVmIdResponse(rsp)
}

// DeleteV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse request with arbitrary body returning *DeleteV2VmsVmIdSnapshotSnapshotIdResponse
func (c *ClientWithResponses) DeleteV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdSnapshotSnapshotIdResponse, error) {
	rsp, err := c.DeleteV2VmsVmIdSnapshotSnapshotIdWithBody(ctx, vmId, snapshotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2VmsVmIdSnapshotSnapshotIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteV2VmsVmIdSnapshotSnapshotIdWithResponse(ctx context.Context, vmId string, snapshotId string, body DeleteV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV2VmsVmIdSnapshotSnapshotIdResponse, error) {
	rsp, err := c.DeleteV2VmsVmIdSnapshotSnapshotId(ctx, vmId, snapshotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2VmsVmIdSnapshotSnapshotIdResponse(rsp)
}

// PostV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse request with arbitrary body returning *PostV2VmsVmIdSnapshotSnapshotIdResponse
func (c *ClientWithResponses) PostV2VmsVmIdSnapshotSnapshotIdWithBodyWithResponse(ctx context.Context, vmId string, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdSnapshotSnapshotIdResponse, error) {
	rsp, err := c.PostV2VmsVmIdSnapshotSnapshotIdWithBody(ctx, vmId, snapshotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2VmsVmIdSnapshotSnapshotIdResponse(rsp)
}

func (c *ClientWithResponses) PostV2VmsVmIdSnapshotSnapshotIdWithResponse(ctx context.Context, vmId string, snapshotId string, body PostV2VmsVmIdSnapshotSnapshotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2VmsVmIdSnapshotSnapshotIdResponse, error) {
	rsp, err := c.PostV2VmsVmIdSnapshotSnapshotId(ctx, vmId, snapshotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2VmsVmIdSnapshotSnapshotIdResponse(rsp)
}

// GetV2WorkerStatusWithResponse request returning *GetV2WorkerStatusResponse
func (c *ClientWithResponses) GetV2WorkerStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2WorkerStatusResponse, error) {
	rsp, err := c.GetV2WorkerStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2WorkerStatusResponse(rsp)
}

// GetV2ZonesWithResponse request returning *GetV2ZonesResponse
func (c *ClientWithResponses) GetV2ZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ZonesResponse, error) {
	rsp, err := c.GetV2Zones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ZonesResponse(rsp)
}

// ParseGetV2DeploymentsResponse parses an HTTP response from a GetV2DeploymentsWithResponse call
func ParseGetV2DeploymentsResponse(rsp *http.Response) (*GetV2DeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyDeploymentRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2DeploymentsResponse parses an HTTP response from a PostV2DeploymentsWithResponse call
func ParsePostV2DeploymentsResponse(rsp *http.Response) (*PostV2DeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2DeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyDeploymentRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2DeploymentsDeploymentIdResponse parses an HTTP response from a DeleteV2DeploymentsDeploymentIdWithResponse call
func ParseDeleteV2DeploymentsDeploymentIdResponse(rsp *http.Response) (*DeleteV2DeploymentsDeploymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2DeploymentsDeploymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyDeploymentCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2DeploymentsDeploymentIdResponse parses an HTTP response from a GetV2DeploymentsDeploymentIdWithResponse call
func ParseGetV2DeploymentsDeploymentIdResponse(rsp *http.Response) (*GetV2DeploymentsDeploymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DeploymentsDeploymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyDeploymentRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2DeploymentsDeploymentIdResponse parses an HTTP response from a PostV2DeploymentsDeploymentIdWithResponse call
func ParsePostV2DeploymentsDeploymentIdResponse(rsp *http.Response) (*PostV2DeploymentsDeploymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2DeploymentsDeploymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyDeploymentUpdated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2DeploymentsDeploymentIdCiConfigResponse parses an HTTP response from a GetV2DeploymentsDeploymentIdCiConfigWithResponse call
func ParseGetV2DeploymentsDeploymentIdCiConfigResponse(rsp *http.Response) (*GetV2DeploymentsDeploymentIdCiConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DeploymentsDeploymentIdCiConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyCiConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2DeploymentsDeploymentIdCommandResponse parses an HTTP response from a PostV2DeploymentsDeploymentIdCommandWithResponse call
func ParsePostV2DeploymentsDeploymentIdCommandResponse(rsp *http.Response) (*PostV2DeploymentsDeploymentIdCommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2DeploymentsDeploymentIdCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 423:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON423 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2DeploymentsDeploymentIdLogsResponse parses an HTTP response from a GetV2DeploymentsDeploymentIdLogsWithResponse call
func ParseGetV2DeploymentsDeploymentIdLogsResponse(rsp *http.Response) (*GetV2DeploymentsDeploymentIdLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DeploymentsDeploymentIdLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2DiscoverResponse parses an HTTP response from a GetV2DiscoverWithResponse call
func ParseGetV2DiscoverResponse(rsp *http.Response) (*GetV2DiscoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DiscoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyDiscoverRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2GpuGroupsResponse parses an HTTP response from a GetV2GpuGroupsWithResponse call
func ParseGetV2GpuGroupsResponse(rsp *http.Response) (*GetV2GpuGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2GpuGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyGpuGroupRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 423:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON423 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2GpuGroupsGpuGroupIdResponse parses an HTTP response from a GetV2GpuGroupsGpuGroupIdWithResponse call
func ParseGetV2GpuGroupsGpuGroupIdResponse(rsp *http.Response) (*GetV2GpuGroupsGpuGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2GpuGroupsGpuGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyGpuGroupRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 423:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON423 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2GpuLeasesResponse parses an HTTP response from a GetV2GpuLeasesWithResponse call
func ParseGetV2GpuLeasesResponse(rsp *http.Response) (*GetV2GpuLeasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2GpuLeasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyGpuLeaseRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 423:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON423 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2GpuLeasesResponse parses an HTTP response from a PostV2GpuLeasesWithResponse call
func ParsePostV2GpuLeasesResponse(rsp *http.Response) (*PostV2GpuLeasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2GpuLeasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyGpuLeaseCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2GpuLeasesGpuLeaseIdResponse parses an HTTP response from a DeleteV2GpuLeasesGpuLeaseIdWithResponse call
func ParseDeleteV2GpuLeasesGpuLeaseIdResponse(rsp *http.Response) (*DeleteV2GpuLeasesGpuLeaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2GpuLeasesGpuLeaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyGpuLeaseDeleted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2GpuLeasesGpuLeaseIdResponse parses an HTTP response from a GetV2GpuLeasesGpuLeaseIdWithResponse call
func ParseGetV2GpuLeasesGpuLeaseIdResponse(rsp *http.Response) (*GetV2GpuLeasesGpuLeaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2GpuLeasesGpuLeaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyGpuLeaseRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 423:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON423 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2GpuLeasesGpuLeaseIdResponse parses an HTTP response from a PostV2GpuLeasesGpuLeaseIdWithResponse call
func ParsePostV2GpuLeasesGpuLeaseIdResponse(rsp *http.Response) (*PostV2GpuLeasesGpuLeaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2GpuLeasesGpuLeaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyGpuLeaseUpdated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2HooksHarborResponse parses an HTTP response from a PostV2HooksHarborWithResponse call
func ParsePostV2HooksHarborResponse(rsp *http.Response) (*PostV2HooksHarborResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2HooksHarborResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2HostsResponse parses an HTTP response from a GetV2HostsWithResponse call
func ParseGetV2HostsResponse(rsp *http.Response) (*GetV2HostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2HostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyHostRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2HostsVerboseResponse parses an HTTP response from a GetV2HostsVerboseWithResponse call
func ParseGetV2HostsVerboseResponse(rsp *http.Response) (*GetV2HostsVerboseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2HostsVerboseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyHostVerboseRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2JobsResponse parses an HTTP response from a GetV2JobsWithResponse call
func ParseGetV2JobsResponse(rsp *http.Response) (*GetV2JobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2JobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyJobRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2JobsJobIdResponse parses an HTTP response from a GetV2JobsJobIdWithResponse call
func ParseGetV2JobsJobIdResponse(rsp *http.Response) (*GetV2JobsJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2JobsJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyJobRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2JobsJobIdResponse parses an HTTP response from a PostV2JobsJobIdWithResponse call
func ParsePostV2JobsJobIdResponse(rsp *http.Response) (*PostV2JobsJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2JobsJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyJobRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2MetricsResponse parses an HTTP response from a GetV2MetricsWithResponse call
func ParseGetV2MetricsResponse(rsp *http.Response) (*GetV2MetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2NotificationsResponse parses an HTTP response from a GetV2NotificationsWithResponse call
func ParseGetV2NotificationsResponse(rsp *http.Response) (*GetV2NotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2NotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyNotificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV2NotificationsNotificationIdResponse parses an HTTP response from a DeleteV2NotificationsNotificationIdWithResponse call
func ParseDeleteV2NotificationsNotificationIdResponse(rsp *http.Response) (*DeleteV2NotificationsNotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2NotificationsNotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2NotificationsNotificationIdResponse parses an HTTP response from a GetV2NotificationsNotificationIdWithResponse call
func ParseGetV2NotificationsNotificationIdResponse(rsp *http.Response) (*GetV2NotificationsNotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2NotificationsNotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyNotificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2NotificationsNotificationIdResponse parses an HTTP response from a PostV2NotificationsNotificationIdWithResponse call
func ParsePostV2NotificationsNotificationIdResponse(rsp *http.Response) (*PostV2NotificationsNotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2NotificationsNotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2RegisterResponse parses an HTTP response from a GetV2RegisterWithResponse call
func ParseGetV2RegisterResponse(rsp *http.Response) (*GetV2RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2ResourceMigrationsResponse parses an HTTP response from a GetV2ResourceMigrationsWithResponse call
func ParseGetV2ResourceMigrationsResponse(rsp *http.Response) (*GetV2ResourceMigrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ResourceMigrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyResourceMigrationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2ResourceMigrationsResponse parses an HTTP response from a PostV2ResourceMigrationsWithResponse call
func ParsePostV2ResourceMigrationsResponse(rsp *http.Response) (*PostV2ResourceMigrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2ResourceMigrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyResourceMigrationCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2ResourceMigrationsResourceMigrationIdResponse parses an HTTP response from a DeleteV2ResourceMigrationsResourceMigrationIdWithResponse call
func ParseDeleteV2ResourceMigrationsResourceMigrationIdResponse(rsp *http.Response) (*DeleteV2ResourceMigrationsResourceMigrationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2ResourceMigrationsResourceMigrationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2ResourceMigrationsResourceMigrationIdResponse parses an HTTP response from a GetV2ResourceMigrationsResourceMigrationIdWithResponse call
func ParseGetV2ResourceMigrationsResourceMigrationIdResponse(rsp *http.Response) (*GetV2ResourceMigrationsResourceMigrationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ResourceMigrationsResourceMigrationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyResourceMigrationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2ResourceMigrationsResourceMigrationIdResponse parses an HTTP response from a PostV2ResourceMigrationsResourceMigrationIdWithResponse call
func ParsePostV2ResourceMigrationsResourceMigrationIdResponse(rsp *http.Response) (*PostV2ResourceMigrationsResourceMigrationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2ResourceMigrationsResourceMigrationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyResourceMigrationUpdated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2StorageManagersResponse parses an HTTP response from a GetV2StorageManagersWithResponse call
func ParseGetV2StorageManagersResponse(rsp *http.Response) (*GetV2StorageManagersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StorageManagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodySmRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2StorageManagersStorageManagerIdResponse parses an HTTP response from a DeleteV2StorageManagersStorageManagerIdWithResponse call
func ParseDeleteV2StorageManagersStorageManagerIdResponse(rsp *http.Response) (*DeleteV2StorageManagersStorageManagerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2StorageManagersStorageManagerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodySmDeleted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2StorageManagersStorageManagerIdResponse parses an HTTP response from a GetV2StorageManagersStorageManagerIdWithResponse call
func ParseGetV2StorageManagersStorageManagerIdResponse(rsp *http.Response) (*GetV2StorageManagersStorageManagerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StorageManagersStorageManagerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodySmDeleted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2SystemCapacitiesResponse parses an HTTP response from a GetV2SystemCapacitiesWithResponse call
func ParseGetV2SystemCapacitiesResponse(rsp *http.Response) (*GetV2SystemCapacitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemCapacitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyTimestampedSystemCapacities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2SystemStatsResponse parses an HTTP response from a GetV2SystemStatsWithResponse call
func ParseGetV2SystemStatsResponse(rsp *http.Response) (*GetV2SystemStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyTimestampedSystemStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2SystemStatusResponse parses an HTTP response from a GetV2SystemStatusWithResponse call
func ParseGetV2SystemStatusResponse(rsp *http.Response) (*GetV2SystemStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyTimestampedSystemStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2TeamsResponse parses an HTTP response from a GetV2TeamsWithResponse call
func ParseGetV2TeamsResponse(rsp *http.Response) (*GetV2TeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2TeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyTeamRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2TeamsResponse parses an HTTP response from a PostV2TeamsWithResponse call
func ParsePostV2TeamsResponse(rsp *http.Response) (*PostV2TeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2TeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyTeamRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2TeamsTeamIdResponse parses an HTTP response from a DeleteV2TeamsTeamIdWithResponse call
func ParseDeleteV2TeamsTeamIdResponse(rsp *http.Response) (*DeleteV2TeamsTeamIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2TeamsTeamIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2TeamsTeamIdResponse parses an HTTP response from a GetV2TeamsTeamIdWithResponse call
func ParseGetV2TeamsTeamIdResponse(rsp *http.Response) (*GetV2TeamsTeamIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2TeamsTeamIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyTeamRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2TeamsTeamIdResponse parses an HTTP response from a PostV2TeamsTeamIdWithResponse call
func ParsePostV2TeamsTeamIdResponse(rsp *http.Response) (*PostV2TeamsTeamIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2TeamsTeamIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyTeamRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BodyBindingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2UsersResponse parses an HTTP response from a GetV2UsersWithResponse call
func ParseGetV2UsersResponse(rsp *http.Response) (*GetV2UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyUserRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2UsersUserIdResponse parses an HTTP response from a GetV2UsersUserIdWithResponse call
func ParseGetV2UsersUserIdResponse(rsp *http.Response) (*GetV2UsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2UsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyUserRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2UsersUserIdResponse parses an HTTP response from a PostV2UsersUserIdWithResponse call
func ParsePostV2UsersUserIdResponse(rsp *http.Response) (*PostV2UsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2UsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyUserRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2UsersUserIdApiKeysResponse parses an HTTP response from a PostV2UsersUserIdApiKeysWithResponse call
func ParsePostV2UsersUserIdApiKeysResponse(rsp *http.Response) (*PostV2UsersUserIdApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2UsersUserIdApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyApiKeyCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2VmsResponse parses an HTTP response from a GetV2VmsWithResponse call
func ParseGetV2VmsResponse(rsp *http.Response) (*GetV2VmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2VmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyVmRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2VmsResponse parses an HTTP response from a PostV2VmsWithResponse call
func ParsePostV2VmsResponse(rsp *http.Response) (*PostV2VmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2VmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyVmCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2VmsVmIdResponse parses an HTTP response from a DeleteV2VmsVmIdWithResponse call
func ParseDeleteV2VmsVmIdResponse(rsp *http.Response) (*DeleteV2VmsVmIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2VmsVmIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyVmDeleted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2VmsVmIdResponse parses an HTTP response from a GetV2VmsVmIdWithResponse call
func ParseGetV2VmsVmIdResponse(rsp *http.Response) (*GetV2VmsVmIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2VmsVmIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyVmRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2VmsVmIdResponse parses an HTTP response from a PostV2VmsVmIdWithResponse call
func ParsePostV2VmsVmIdResponse(rsp *http.Response) (*PostV2VmsVmIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2VmsVmIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyVmUpdated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2VmsVmIdSnapshotSnapshotIdResponse parses an HTTP response from a DeleteV2VmsVmIdSnapshotSnapshotIdWithResponse call
func ParseDeleteV2VmsVmIdSnapshotSnapshotIdResponse(rsp *http.Response) (*DeleteV2VmsVmIdSnapshotSnapshotIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2VmsVmIdSnapshotSnapshotIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyVmSnapshotDeleted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2VmsVmIdSnapshotSnapshotIdResponse parses an HTTP response from a PostV2VmsVmIdSnapshotSnapshotIdWithResponse call
func ParsePostV2VmsVmIdSnapshotSnapshotIdResponse(rsp *http.Response) (*PostV2VmsVmIdSnapshotSnapshotIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2VmsVmIdSnapshotSnapshotIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BodyVmSnapshotRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2WorkerStatusResponse parses an HTTP response from a GetV2WorkerStatusWithResponse call
func ParseGetV2WorkerStatusResponse(rsp *http.Response) (*GetV2WorkerStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2WorkerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyWorkerStatusRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2ZonesResponse parses an HTTP response from a GetV2ZonesWithResponse call
func ParseGetV2ZonesResponse(rsp *http.Response) (*GetV2ZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BodyZoneRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SysErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
